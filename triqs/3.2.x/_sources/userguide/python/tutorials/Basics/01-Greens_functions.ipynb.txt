{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "# TRIQS Green's functions\n",
    "\n",
    "It is now time to start using some of the tools provided by TRIQS.\n",
    "\n",
    "Much of the functionality in TRIQS, while implemented in C++ for optimal performance, is exposed\n",
    "through a Python interface to make it easier to use. From a practical point of view this means\n",
    "that you can think of TRIQS as a python library, just like numpy or matplotlib.\n",
    "\n",
    "One of the central objects of a many-body calculation is a Green's function.\n",
    "Green functions in TRIQS are functions defined on a mesh $\\cal{M}$ of points that hold values in some domain $\\cal{D}$, for example $\\mathbb{C}^{2\\times2}$\n",
    "\n",
    "$$\n",
    "G: \\cal{M} \\rightarrow \\cal{D}\n",
    "$$\n",
    "\n",
    "A few common Green function meshes in TRIQS include:\n",
    "\n",
    "- `MeshReFreq` - Real-frequencies equally spaced in $[\\omega_{min},\\omega_{max}]$\n",
    "- `MeshImFreq` - Matsubara Frequencies\n",
    "- `MeshImTime` - Imaginary time points equally spaced in $[0,\\beta]$\n",
    "- `MeshReTime` - Real-time points (not covered in this tutorial)\n",
    "\n",
    "Let's see how we can **construct a Mesh and print its values**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\u001b[0;31mInit signature:\u001b[0m \u001b[0mMeshImTime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m/\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
       "\u001b[0;31mDocstring:\u001b[0m     \n",
       "Mesh of imaginary times\n",
       "\n",
       "Mesh-points are evenly distributed in the interval [0,beta]\n",
       "including points at both edges.\n",
       "\n",
       "Parameters\n",
       "----------\n",
       "beta : float\n",
       "    Inverse temperature\n",
       "S : str\n",
       "    Statistic, 'Fermion' or 'Boson'\n",
       "n_tau : int\n",
       "    Number of mesh-points\n",
       "\u001b[0;31mFile:\u001b[0m           ~/opt/triqs/lib/python3.9/site-packages/triqs/gf/meshes.cpython-39-darwin.so\n",
       "\u001b[0;31mType:\u001b[0m           type\n",
       "\u001b[0;31mSubclasses:\u001b[0m     \n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Import the Mesh type we want to use\n",
    "from triqs.gf import MeshImTime\n",
    "\n",
    "# The documentation tells us which parameters we need to pass for the mesh construction\n",
    "?MeshImTime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-22T22:11:28.331133Z",
     "iopub.status.busy": "2022-06-22T22:11:28.330827Z",
     "iopub.status.idle": "2022-06-22T22:11:28.334842Z",
     "shell.execute_reply": "2022-06-22T22:11:28.334154Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0\n",
      "0.5\n",
      "1.0\n",
      "1.5\n",
      "2.0\n",
      "2.5\n",
      "3.0\n",
      "3.5\n",
      "4.0\n",
      "4.5\n",
      "5.0\n"
     ]
    }
   ],
   "source": [
    "# Provide the inverse temperature, Statistic, and number of points\n",
    "tau_mesh = MeshImTime(beta=5, S='Fermion', n_tau=11)\n",
    "\n",
    "# We can loop and print the mesh-point values\n",
    "for tau in tau_mesh:\n",
    "    print(tau.value)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us now **create and initialize a Green function for a single atomic level** with energy $\\epsilon$ in the grand-canonical ensemble with inverse temperature $\\beta$\n",
    "\n",
    "$$\n",
    "G[\\tau] = -\\langle\\cal{T}c(\\tau) c^\\dagger\\rangle = \\frac{e^{-\\tau \\epsilon}}{1+e^{-\\beta \\epsilon}}\n",
    "$$\n",
    "\n",
    "We first have a look at the documentation for `Gf`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\u001b[0;31mInit signature:\u001b[0m \u001b[0mGf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
       "\u001b[0;31mDocstring:\u001b[0m     \n",
       "TRIQS Greens function container class\n",
       "\n",
       "Parameters\n",
       "----------\n",
       "\n",
       "mesh: Types defined in triqs.gf beginning with 'Mesh'\n",
       "      The mesh on which the Green function is defined.\n",
       "\n",
       "data: numpy.array, optional\n",
       "      The data of the Greens function.\n",
       "      Must be of dimension ``mesh.rank + target_rank``.\n",
       "\n",
       "target_shape: list of int, optional\n",
       "              Shape of the target space.\n",
       "\n",
       "is_real: bool\n",
       "         Is the Greens function real valued?\n",
       "         If true, and target_shape is set, the data will be real.\n",
       "         Mutually exclusive with argument ``data``.\n",
       "\n",
       "name: str \n",
       "      The name of the Greens function for plotting.\n",
       "\n",
       "Notes\n",
       "-----\n",
       "\n",
       "One of ``target_shape`` or ``data`` must be set, and the other must be `None`. If passing ``data``\n",
       "and ``indices`` the ``data.shape`` needs to be compatible with the shape of ``indices``.\n",
       "\u001b[0;31mFile:\u001b[0m           ~/opt/triqs/lib/python3.9/site-packages/triqs/gf/gf.py\n",
       "\u001b[0;31mType:\u001b[0m           AddMethod\n",
       "\u001b[0;31mSubclasses:\u001b[0m     GfReFreq, GfImFreq, GfImTime, GfReTime, GfLegendre\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from triqs.gf import Gf\n",
    "?Gf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-22T22:11:28.344757Z",
     "iopub.status.busy": "2022-06-22T22:11:28.344519Z",
     "iopub.status.idle": "2022-06-22T22:11:28.349562Z",
     "shell.execute_reply": "2022-06-22T22:11:28.348979Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Greens Function  with mesh Imaginary Time Mesh of size 11, Domain: Matsubara domain with beta = 5, statistic = Fermion and target_shape (): \n",
      "\n",
      "-0.119\n",
      "-0.146\n",
      "-0.178\n",
      "-0.217\n",
      "-0.265\n",
      "-0.324\n",
      "-0.396\n",
      "-0.483\n",
      "-0.590\n",
      "-0.721\n",
      "-0.881\n"
     ]
    }
   ],
   "source": [
    "# Create scalar-valued imaginary-time Green function\n",
    "G = Gf(mesh=tau_mesh, target_shape=[], is_real=True)\n",
    "\n",
    "# Print the Green function description\n",
    "print(G)\n",
    "\n",
    "# Loop initialization\n",
    "eps = -0.4\n",
    "beta = G.mesh.beta\n",
    "from math import exp\n",
    "for tau in G.mesh:\n",
    "    # Slightly adjusted expression for numerical stability\n",
    "    G[tau] = -exp((beta*(eps<0) - tau.value) * eps) / (1. + exp(-beta * abs(eps)))\n",
    "    print(\"{:.3f}\".format(G[tau]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In order to **plot this Green function** we can use the matplotlib interface defined in TRIQS.\n",
    "Note that the function to plot Green's function is `oplot` and not just `plot` like in matplotlib."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-22T22:11:28.352437Z",
     "iopub.status.busy": "2022-06-22T22:11:28.352199Z",
     "iopub.status.idle": "2022-06-22T22:11:29.192348Z",
     "shell.execute_reply": "2022-06-22T22:11:29.191672Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from triqs.plot.mpl_interface import oplot,plt\n",
    "\n",
    "# Make plots show up directly in the notebook:\n",
    "%matplotlib inline\n",
    "\n",
    "# Make all figures slightly bigger\n",
    "import matplotlib as mpl\n",
    "mpl.rcParams['figure.dpi']=100\n",
    "\n",
    "# Additional arguments like 'linewidth' are passed on to matplotlib\n",
    "oplot(G, '-', name='G', linewidth=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Matrix-Valued Green functions\n",
    "\n",
    "In most realistic problems we have to treat more than just a single orbital\n",
    "\n",
    "$$\n",
    "G_{ij}[\\tau] = -\\langle\\cal{T}c_i(\\tau) c_j^\\dagger\\rangle\n",
    "$$\n",
    "\n",
    "For this purpose, TRIQS provides Green functions that have a Matrix structure. Let's see how you can create and use them"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-22T22:11:29.195784Z",
     "iopub.status.busy": "2022-06-22T22:11:29.195473Z",
     "iopub.status.idle": "2022-06-22T22:11:29.200271Z",
     "shell.execute_reply": "2022-06-22T22:11:29.199725Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Greens Function  with mesh Real Freq Mesh of size 1000, omega_min: -4, omega_max: 4 and target_shape (2, 2): "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# A uniform real-frequency mesh on a given interval\n",
    "from triqs.gf import MeshReFreq\n",
    "w_mesh = MeshReFreq(window=(-4,4), n_w=1000)\n",
    "\n",
    "# Gf with 2x2 Matrix structure holding complex values\n",
    "G = Gf(mesh=w_mesh, target_shape=[2,2])\n",
    "G # <- Same as print(repr(G))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-22T22:11:29.203028Z",
     "iopub.status.busy": "2022-06-22T22:11:29.202785Z",
     "iopub.status.idle": "2022-06-22T22:11:29.206266Z",
     "shell.execute_reply": "2022-06-22T22:11:29.205618Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.+0.j 0.+0.j]\n",
      " [0.+0.j 0.+0.j]]\n"
     ]
    }
   ],
   "source": [
    "# Accessing a specific mesh point gives us a matrix\n",
    "from triqs.gf import Idx # Use Idx to access Gf at specific Index\n",
    "print(G[Idx(0)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-22T22:11:29.209294Z",
     "iopub.status.busy": "2022-06-22T22:11:29.209073Z",
     "iopub.status.idle": "2022-06-22T22:11:29.212622Z",
     "shell.execute_reply": "2022-06-22T22:11:29.212086Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Greens Function  with mesh Real Freq Mesh of size 1000, omega_min: -4, omega_max: 4 and target_shape (): "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# By Fixing the orbital indices we obtain a Green function that is no longer matrix but complex-valued\n",
    "G[0,0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Block Green functions\n",
    "\n",
    "In many realistic problems we know a priori that (due to e.g. symmetries or conserved quantum numbers) certain components of the Green function will vanish.\n",
    "In other words, the Green's functions has an additional *block structure*.\n",
    "\n",
    "$$\n",
    "\\hat{G} =\n",
    "\\begin{pmatrix}\n",
    "\\hat{g}^0 & 0 & \\cdots & \\cdots \\\\\n",
    "0 & \\hat{g}^1 & 0 & \\cdots \\\\\n",
    "\\cdots & 0 & \\hat{g}^2 & 0 \\\\\n",
    "\\cdots & \\cdots & \\cdots & \\cdots\n",
    "\\end{pmatrix}\n",
    "$$\n",
    "\n",
    "Here the $\\hat{g}^i$ are Green's functions with non-zero elements $g^i_{ab}$. In principle they can have\n",
    "different dimensions.\n",
    "\n",
    "For example, you can imagine a system of 5 $d$-orbitals that are split by a\n",
    "crystal field into 3 $t_{2g}$-orbitals and 2 $e_g$-orbitals. For symmetry reasons, you can have a\n",
    "situation where these orbitals do not talk to each other. In that case, the complete Green's function\n",
    "would have two blocks, one of size 2x2 corresponding to the $e_g$ orbitals and one of size 3x3 corresponding for the $t_{2g}$ orbitals. \n",
    "\n",
    "$$\n",
    "\\hat{G} =\n",
    "\\begin{pmatrix}\n",
    "\\hat{g}^{e_g} & 0  \\\\\n",
    "0 & \\hat{g}^{t_{2g}}  \\\\\n",
    "\\end{pmatrix}=\n",
    "\\begin{pmatrix}\n",
    "\\begin{pmatrix}\n",
    "g^{e_g}_{00} & g^{e_g}_{01} \\\\\n",
    "g^{e_g}_{10} & g^{e_g}_{11}\n",
    "\\end{pmatrix} & 0 \\\\\n",
    "0 & \\begin{pmatrix}\n",
    "g^{t_{2g}}_{00} & g^{t_{2g}}_{01} & g^{t_{2g}}_{02} \\\\\n",
    "g^{t_{2g}}_{10} & g^{t_{2g}}_{11} & g^{t_{2g}}_{12} \\\\\n",
    "g^{t_{2g}}_{20} & g^{t_{2g}}_{21} & g^{t_{2g}}_{22} \\\\\n",
    "\\end{pmatrix}\n",
    "\\end{pmatrix}\n",
    "$$\n",
    "\n",
    "Let us now consider a more concrete example for the case outlined above:\n",
    "$$\n",
    "\\hat{G} =\n",
    "\\begin{pmatrix}\n",
    "\\begin{pmatrix}\n",
    "\\omega & V_1 \\\\\n",
    "V_1 & \\omega\n",
    "\\end{pmatrix}^{-1} & 0 \\\\\n",
    "0 & \\begin{pmatrix}\n",
    "\\omega - \\epsilon_2 & 0 & V_2 \\\\\n",
    "0 & \\omega - \\epsilon_2 & 0 \\\\\n",
    "V_2 & 0 & \\omega - \\epsilon_2\n",
    "\\end{pmatrix}^{-1}\n",
    "\\end{pmatrix}\n",
    "$$\n",
    "\n",
    "The associated type in TRIQS is called `BlockGf`. Let us have a first look at it's documentation:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\u001b[0;31mInit signature:\u001b[0m \u001b[0mBlockGf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
       "\u001b[0;31mDocstring:\u001b[0m      Generic Green's Function by Block.\n",
       "\u001b[0;31mInit docstring:\u001b[0m\n",
       "* There are several possible constructors, which accept only keyword arguments.\n",
       "\n",
       "         * BlockGf(name_list = list of names, block_list = list of blocks, make_copies = False, name = '')\n",
       "\n",
       "                * ``name_list``: list of the names of the blocks, e.g. [\"up\",\"down\"].\n",
       "                * ``block_list``: list of blocks of Green's functions.\n",
       "                * ``make_copies``: If True, it makes a copy of the blocks and build the Green's function from these copies.\n",
       "\n",
       "         * BlockGf(mesh = mesh, gf_struct = block structure, target_rank = rank of target space, name = '')\n",
       "\n",
       "                * ``mesh``: The mesh used to construct each block\n",
       "                * ``target_rank``: The rank of the target space of each block (default: 2)\n",
       "                * ``gf_struct``: List of pairs [ (str,int), ... ] providing the block name and its linear size\n",
       "\n",
       "         * BlockGf(name_block_generator, make_copies = False, name = '')\n",
       "\n",
       "                * ``name_block_generator``: a generator of (name, block)\n",
       "                * ``make_copies``: If True, it makes a copy of the blocks and build the Green's function from these copies.\n",
       "\n",
       "       \n",
       "\u001b[0;31mFile:\u001b[0m           ~/opt/triqs/lib/python3.9/site-packages/triqs/gf/block_gf.py\n",
       "\u001b[0;31mType:\u001b[0m           type\n",
       "\u001b[0;31mSubclasses:\u001b[0m     \n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from triqs.gf import BlockGf\n",
    "?BlockGf"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will in the following consider the first two options for the construction listed in the documentation.\n",
    "\n",
    "The first way is to simply define the two Green function blocks separately, and to then pass these blocks, together with their names:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-22T22:11:29.222349Z",
     "iopub.status.busy": "2022-06-22T22:11:29.222086Z",
     "iopub.status.idle": "2022-06-22T22:11:29.226762Z",
     "shell.execute_reply": "2022-06-22T22:11:29.226071Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Green Function G composed of 2 blocks: \n",
      " Greens Function G_eg with mesh Real Freq Mesh of size 1000, omega_min: -4, omega_max: 4 and target_shape (2, 2): \n",
      " \n",
      " Greens Function G_t2g with mesh Real Freq Mesh of size 1000, omega_min: -4, omega_max: 4 and target_shape (3, 3): \n",
      " \n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Construct individual blocks\n",
    "g_eg  = Gf(mesh=w_mesh, target_shape=[2,2])\n",
    "g_t2g = Gf(mesh=w_mesh, target_shape=[3,3])\n",
    "\n",
    "# Combine blocks into a BlockGf\n",
    "G = BlockGf(name_list=['eg', 't2g'], block_list=[g_eg, g_t2g])\n",
    "print(G)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can then access individual blocks simply by using their name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-22T22:11:29.229939Z",
     "iopub.status.busy": "2022-06-22T22:11:29.229665Z",
     "iopub.status.idle": "2022-06-22T22:11:29.234296Z",
     "shell.execute_reply": "2022-06-22T22:11:29.233605Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Greens Function G_eg with mesh Real Freq Mesh of size 1000, omega_min: -4, omega_max: 4 and target_shape (2, 2): "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "G['eg']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For cases where all blocks have a square-matrix `target_shape` we can alternatively pass a list of pairs of block-names and linear matrix sizes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-22T22:11:29.237407Z",
     "iopub.status.busy": "2022-06-22T22:11:29.237132Z",
     "iopub.status.idle": "2022-06-22T22:11:29.241238Z",
     "shell.execute_reply": "2022-06-22T22:11:29.240584Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Green Function G composed of 2 blocks: \n",
      " Greens Function G_eg with mesh Real Freq Mesh of size 1000, omega_min: -4, omega_max: 4 and target_shape (2, 2): \n",
      " \n",
      " Greens Function G_t2g with mesh Real Freq Mesh of size 1000, omega_min: -4, omega_max: 4 and target_shape (3, 3): \n",
      " \n",
      "\n"
     ]
    }
   ],
   "source": [
    "# List of Block-names and their linear matrix size\n",
    "gf_struct = [('eg',2), ('t2g',3)]\n",
    "\n",
    "G = BlockGf(mesh=w_mesh, gf_struct=gf_struct)\n",
    "print(G)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us now initialize the Green function values. Instead of writing a loop over the mesh, we here make use of the the operator `<<`, which can fill the Green's function with simple expressions containing the `Omega` descriptor. Here `Omega` is replaced by the values of the mesh."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-22T22:11:29.244211Z",
     "iopub.status.busy": "2022-06-22T22:11:29.243949Z",
     "iopub.status.idle": "2022-06-22T22:11:29.263452Z",
     "shell.execute_reply": "2022-06-22T22:11:29.262902Z"
    }
   },
   "outputs": [],
   "source": [
    "from triqs.gf import Omega\n",
    "\n",
    "V1 = 0.1\n",
    "V2 = 0.2\n",
    "eps_t2g = -2.0\n",
    "\n",
    "# The e_g part\n",
    "G['eg'][0,0] << Omega\n",
    "G['eg'][0,1] << V1\n",
    "G['eg'][1,0] << V1\n",
    "G['eg'][1,1] << Omega\n",
    "\n",
    "# Perform an in-place Matrix inversion\n",
    "G['eg'].invert()\n",
    "\n",
    "# The t_2g part\n",
    "G['t2g'][0,0] << Omega - eps_t2g\n",
    "G['t2g'][1,1] << Omega - eps_t2g\n",
    "G['t2g'][2,2] << Omega - eps_t2g\n",
    "G['t2g'][0,2] << V2\n",
    "G['t2g'][2,0] << V2\n",
    "G['t2g'].invert()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When using the Green function object, it is often convenient to **iterate over all the blocks** of a `BlockGf`. We can do this with the following construct"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-22T22:11:29.266644Z",
     "iopub.status.busy": "2022-06-22T22:11:29.266377Z",
     "iopub.status.idle": "2022-06-22T22:11:29.270120Z",
     "shell.execute_reply": "2022-06-22T22:11:29.269515Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This is the block called eg\n",
      "The associated Green's function is Greens Function G_eg with mesh Real Freq Mesh of size 1000, omega_min: -4, omega_max: 4 and target_shape (2, 2): \n",
      "\n",
      "This is the block called t2g\n",
      "The associated Green's function is Greens Function G_t2g with mesh Real Freq Mesh of size 1000, omega_min: -4, omega_max: 4 and target_shape (3, 3): \n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Loop over the blocks\n",
    "for name, g in G:\n",
    "    print(\"This is the block called\", name)\n",
    "    print(\"The associated Green's function is\", g)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Additional Initialization Descriptors\n",
    "\n",
    "In the following we will introduce a few additional means of initializing Green functions using `<<`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Flat density of states\n",
    "Consider the problem of a single impurity level embedded in a flat conduction bath $\\Gamma$ of electrons.\n",
    "$$\n",
    "g^\\mathrm{imp} (\\omega) = \\frac{1}{\\omega - \\epsilon_d - V^2 \\Gamma(\\omega)}\n",
    "$$\n",
    "\n",
    "In the equation above $\\epsilon_d$ is the energy of the level and $\\Gamma$ is the Green's function of\n",
    "a flat conduction bath\n",
    "\n",
    "$$\n",
    "\\Gamma(\\omega) = \\int_{-D}^{D}\\frac{1}{\\omega-\\epsilon + i\\eta}\\frac{d\\epsilon}{2D}\n",
    "$$\n",
    "\n",
    "Here $D$ denotes the half-bandwidth.\n",
    "Let's see how to define and then plot this Green's function by using `inverse` and the `Flat` descriptor."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-22T22:11:29.273223Z",
     "iopub.status.busy": "2022-06-22T22:11:29.272808Z",
     "iopub.status.idle": "2022-06-22T22:11:29.285541Z",
     "shell.execute_reply": "2022-06-22T22:11:29.284900Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Greens Function  with mesh Real Freq Mesh of size 1000, omega_min: -4, omega_max: 4 and target_shape (): "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "eps_d = 1.0 # Energy\n",
    "V = 0.2   # Bath Hybridization\n",
    "D = 1.5   # Half bandwidth\n",
    "\n",
    "G = Gf(mesh=w_mesh, target_shape=[])\n",
    "\n",
    "from triqs.gf import Omega, Flat, inverse\n",
    "G << inverse(Omega - eps_d - V**2 * Flat(D))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note the predefined function `Flat` for a flat conduction bath $\\Gamma(\\omega)$.\n",
    "Let's plot the impurity Green's function. Note that default, both the real and imaginary parts are plotted."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-22T22:11:29.288671Z",
     "iopub.status.busy": "2022-06-22T22:11:29.288369Z",
     "iopub.status.idle": "2022-06-22T22:11:29.457427Z",
     "shell.execute_reply": "2022-06-22T22:11:29.456830Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "oplot(G, '-', linewidth=2, name=\"G\") "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can plot the spectral function, which is defined as\n",
    "\n",
    "$$ \\rho(\\omega) = -\\frac{1}{\\pi} \\, \\textbf{Im} \\, G $$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-22T22:11:29.460652Z",
     "iopub.status.busy": "2022-06-22T22:11:29.460373Z",
     "iopub.status.idle": "2022-06-22T22:11:29.603536Z",
     "shell.execute_reply": "2022-06-22T22:11:29.602864Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from math import pi\n",
    "oplot(-G.imag/pi, linewidth=2, name=r\"$\\rho$\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As expected the spectral function is peaked at $\\epsilon_d$ and shows a jump in spectral weight at $D$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Semi-circular density of states\n",
    "\n",
    "Another predefined Green's function is the one corresponding to a semi-circular spectral function. This one will be useful in the DMFT Tutorials later on."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-22T22:11:29.606791Z",
     "iopub.status.busy": "2022-06-22T22:11:29.606527Z",
     "iopub.status.idle": "2022-06-22T22:11:29.744433Z",
     "shell.execute_reply": "2022-06-22T22:11:29.743757Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "D = 1.0 # Half bandwidth\n",
    "\n",
    "G = Gf(mesh=w_mesh, target_shape=[])\n",
    "\n",
    "from triqs.gf import SemiCircular\n",
    "G << SemiCircular(D)\n",
    "\n",
    "oplot(-G.imag/pi, name=r\"$\\rho$\") "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Imaginary-frequency Green's functions\n",
    "-------------------------------------\n",
    "\n",
    "These are Green's function defined on the Matsubara axis. The fermionic Matsubara frequencies\n",
    "are defined by\n",
    "\n",
    "$$\\omega_n = \\frac{(2n+1)\\pi}{\\beta}$$\n",
    "\n",
    "where $\\beta = 1/T$ is the inverse temperature. These Green's functions are important because\n",
    "most Monte Carlo algorithms yield results on the Matsubara axis. Let's see how they\n",
    "are defined:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-22T22:11:29.747957Z",
     "iopub.status.busy": "2022-06-22T22:11:29.747540Z",
     "iopub.status.idle": "2022-06-22T22:11:29.875787Z",
     "shell.execute_reply": "2022-06-22T22:11:29.875149Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.0, 10.0)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Define the imaginary-frequency mesh\n",
    "from triqs.gf import MeshImFreq\n",
    "iw_mesh = MeshImFreq(beta=5, S='Fermion', n_iw=1000)\n",
    "\n",
    "# Create Green Function and fill it using the iOmega_n descriptor\n",
    "G = Gf(mesh=iw_mesh, target_shape=[])\n",
    "from triqs.gf import iOmega_n\n",
    "G << inverse(iOmega_n - 0.2)\n",
    "\n",
    "# Plot the Green's function\n",
    "oplot(G, '-o', name='G')\n",
    "plt.xlim(0,10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Arithmetic Operations\n",
    "\n",
    "Green's functions can be added, multiplied by numbers, etc. The way this is done is quite natural."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-22T22:11:29.878677Z",
     "iopub.status.busy": "2022-06-22T22:11:29.878429Z",
     "iopub.status.idle": "2022-06-22T22:11:30.027158Z",
     "shell.execute_reply": "2022-06-22T22:11:30.026457Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.0, 10.0)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "oplot(G, \"-o\", name='G')\n",
    "oplot(G+G, \"-o\", name='G+G')\n",
    "oplot(3*G+2, \"-o\", name='3*G+1')\n",
    "plt.xlim(0,10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Obtaining the density\n",
    "\n",
    "You can obtain the density for Green functions with a `MeshReFreq` and `MeshImFreq` using the `density` method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-22T22:11:30.030592Z",
     "iopub.status.busy": "2022-06-22T22:11:30.030325Z",
     "iopub.status.idle": "2022-06-22T22:11:30.038467Z",
     "shell.execute_reply": "2022-06-22T22:11:30.037915Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Density = (0.2689414213802611-3.1977552787364233e-15j)\n"
     ]
    }
   ],
   "source": [
    "G = Gf(mesh=iw_mesh, target_shape=[])\n",
    "G << inverse(iOmega_n - 0.2)\n",
    "print(\"Density =\", G.density())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Do not worry about the imaginary component as the machine precision is on the order of $10^{-15}$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fourier transforms\n",
    "\n",
    "TRIQS allows you to easily Fourier transform Green's functions from imaginary-time to imaginary-frequency."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-22T22:11:30.041317Z",
     "iopub.status.busy": "2022-06-22T22:11:30.041100Z",
     "iopub.status.idle": "2022-06-22T22:11:30.159685Z",
     "shell.execute_reply": "2022-06-22T22:11:30.159127Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# A Green's function in frequency set to semi-circular\n",
    "Giw = Gf(mesh=iw_mesh, target_shape=[])\n",
    "Giw << SemiCircular(1.0)\n",
    "\n",
    "# A Green's function in time set by inverse Fourier transform\n",
    "from triqs.gf import make_gf_from_fourier\n",
    "Gtau = make_gf_from_fourier(Giw)\n",
    "oplot(Gtau, name='G')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also go the other way. Let's check that it gives back the original result."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-22T22:11:30.162436Z",
     "iopub.status.busy": "2022-06-22T22:11:30.162203Z",
     "iopub.status.idle": "2022-06-22T22:11:30.333507Z",
     "shell.execute_reply": "2022-06-22T22:11:30.332635Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.0, 5.0)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "Giw_2 = make_gf_from_fourier(Gtau)\n",
    "oplot(Giw, 'o')\n",
    "oplot(Giw_2, 'x')\n",
    "plt.xlim(0,5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the example above `make_gf_from_fourier` will construct a new Green Function object.\n",
    "Alternatively we can initialize an existing Green function using the `Fourier` descriptor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-22T22:11:30.337057Z",
     "iopub.status.busy": "2022-06-22T22:11:30.336740Z",
     "iopub.status.idle": "2022-06-22T22:11:30.342752Z",
     "shell.execute_reply": "2022-06-22T22:11:30.341849Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Greens Function  with mesh Imaginary Time Mesh of size 6001, Domain: Matsubara domain with beta = 5, statistic = Fermion and target_shape (): "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from triqs.gf import Fourier\n",
    "Gtau << Fourier(Giw)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Pade analytical continuation\n",
    "\n",
    "The Fourier transforms allow to go from time to frequency. A much more delicate thing is to do the so-called \"analytical continuation\". This means to start from a Matsubara-frequency Green's function and obtain the corresponding real-frequency Green's function. This can formally be done, but turns out to be a mathematically ill-conditioned problem. Even small amounts of noise in the Matsubara-frequency data will make the continuation to the real axis very unstable.\n",
    "\n",
    "One of the ways to do perform analytical continuation is to use [Pade approximants](https://en.wikipedia.org/wiki/Padé_approximant#Definition). TRIQS can do that for you in the following way:\n",
    "\n",
    "*Note:* Pade is currently implemented only for Green Functions with a Matrix structure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-22T22:11:30.345969Z",
     "iopub.status.busy": "2022-06-22T22:11:30.345692Z",
     "iopub.status.idle": "2022-06-22T22:11:30.501399Z",
     "shell.execute_reply": "2022-06-22T22:11:30.500897Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# The Matsubara Green's function to be continued\n",
    "iw_mesh = MeshImFreq(beta=50, S='Fermion', n_iw=1000)\n",
    "Giw = Gf(mesh=iw_mesh, target_shape=[1,1])\n",
    "Giw << SemiCircular(1.0)\n",
    "\n",
    "# Construct real-frequency Green function and initialize it using Pade approximants\n",
    "Gw = Gf(mesh=w_mesh, target_shape=[1,1])\n",
    "Gw.set_from_pade(Giw)\n",
    "\n",
    "oplot(-Gw.imag/pi, linewidth=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The coarse Matsubara discretization at high temperatures will worsen the Pade result, which is why we chose a much lower temperature value for this example.\n",
    "\n",
    "You can see that the Pade continuation did a pretty good job. We will see later that noise will completely change this picture!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercises"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### <i class=\"fa fa-gear fa-x\" style=\"color: #186391\"></i> Exercise 1\n",
    "\n",
    "Define the following real-frequency Green's function, where $\\Gamma$ is the Green's function of a\n",
    "flat bath (width = 1), $\\epsilon_d = 0.3$ and $V=0.2$:\n",
    "\n",
    "$$\n",
    "G^\\mathrm{s+d} (\\omega) =\n",
    "\\begin{pmatrix} \\omega - \\epsilon_d & V \\\\\\\\ V & \\Gamma^{-1}\n",
    "\\end{pmatrix}^{-1}\n",
    "$$\n",
    "\n",
    "Plot the spectral function for both diagonal components of this Green's function. What\n",
    "do they represent physically?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### <i class=\"fa fa-gear fa-x\" style=\"color: #186391\"></i> Exercise 2\n",
    "\n",
    "Plot the density $n(\\epsilon)$ as a function of $\\epsilon$ for a Green's function $G = 1/(i\\omega_n - \\epsilon)$. What is the curve that you obtained? How does it change with temperature?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### <i class=\"fa fa-gear fa-x\" style=\"color: #186391\"></i> Exercise 3\n",
    "\n",
    "Define a block Green's function with an *up* and a *down* block. Each block is just a simple 1x1 imaginary-frequency Green's function. Iterate over the blocks to initialize the two blocks to $1/i \\omega_n$. What happens if you change $\\beta$?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### <i class=\"fa fa-gear fa-x\" style=\"color: #186391\"></i> Exercise 4\n",
    "\n",
    "Consider a Hubbard atom with $U=2$ at temperature $T = 1/\\beta = 1/10$. The non-interacting and interacting Green's functions for this problem are:\n",
    "\n",
    "$$\n",
    "G_0 = \\frac{1}{i \\omega_n + U/2} \\qquad G = \\frac{1}{2(i\\omega_n + U/2)} + \\frac{1}{2(i\\omega_n - U/2)}\n",
    "$$\n",
    "\n",
    "Using Dyson's equation, verify that the corresponding self-energy is indeed\n",
    "\n",
    "$$\n",
    "\\Sigma = \\frac{U}{2} + \\frac{U^2}{4 i\\omega_n}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### <i class=\"fa fa-gear fa-x\" style=\"color: #186391\"></i> Exercise 5\n",
    "\n",
    "Compute the following second-order self-energy with $U=2$ and $\\beta=50$\n",
    "\n",
    "$$ \\Sigma(i\\omega_n) = U^2 \\int_0^\\beta d\\tau e^{i \\omega_n \\tau} G_0(\\tau)^3 $$\n",
    "\n",
    "using an non-interacting $G_0$ given by a semi-circular of half-bandwidth 1. Use Dyson's equation to compute $G(i\\omega_n)$.\n",
    "\n",
    "Hint: The `SemiCircular` initializer only works for frequency Green's functions.\n",
    "\n",
    "Hint: The \"power operator\" is not defined for Green's functions. Use multiplication."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### <i class=\"fa fa-gear fa-x\" style=\"color: #186391\"></i> Exercise 6\n",
    "\n",
    "Use Pade approximants to obtain a real-frequency version of the Green's function computed in the Exercise 5. What is the effect of interactions at second-order perturbation theory? How is it changing with different values of $U$?"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  },
  "widgets": {
   "state": {},
   "version": "1.1.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
