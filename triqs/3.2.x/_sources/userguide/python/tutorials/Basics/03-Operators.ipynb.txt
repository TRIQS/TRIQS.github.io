{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true,
    "run_control": {
     "frozen": false,
     "read_only": false
    }
   },
   "source": [
    "# Manipulating fermionic operators\n",
    "\n",
    "Before we see how to use a CTQMC impurity solver, it will be useful to learn about operators. Indeed, one of the\n",
    "inputs of the CTQMC solver is a Hamiltonian in operator form.\n",
    "\n",
    "## Fundamental operators\n",
    "\n",
    "After importing the operator module, the keyword `c_dag` and `c` allow to define a new fermionic\n",
    "operator. `c_dag` and `c` are followed by two indices. Inspired by the block structure of Green's functions,\n",
    "the first index is a block index, while the second is the index within the block. Here's an example\n",
    "of operators as they would be defined if we had two blocks *up* and *down* of size 1:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true,
    "execution": {
     "iopub.execute_input": "2022-06-22T22:11:34.943311Z",
     "iopub.status.busy": "2022-06-22T22:11:34.942981Z",
     "iopub.status.idle": "2022-06-22T22:11:35.147547Z",
     "shell.execute_reply": "2022-06-22T22:11:35.147034Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "run_control": {
     "frozen": false,
     "read_only": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1*c_dag('up',0)\n",
      "1*c('up',0)\n",
      "1*c_dag('down',0)\n",
      "1*c('down',0)\n"
     ]
    }
   ],
   "source": [
    "from triqs.operators import c, c_dag, n, Operator # n and Operator will be needed later\n",
    "print(c_dag('up',0))\n",
    "print(c('up',0))\n",
    "print(c_dag('down',0))\n",
    "print(c('down',0))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true,
    "run_control": {
     "frozen": false,
     "read_only": false
    }
   },
   "source": [
    "## Number operator\n",
    "\n",
    "The keyword `n` is defined as $C^\\dagger C$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true,
    "execution": {
     "iopub.execute_input": "2022-06-22T22:11:35.150344Z",
     "iopub.status.busy": "2022-06-22T22:11:35.150042Z",
     "iopub.status.idle": "2022-06-22T22:11:35.153762Z",
     "shell.execute_reply": "2022-06-22T22:11:35.153137Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "run_control": {
     "frozen": false,
     "read_only": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1*c_dag('up',0)*c('up',0)\n"
     ]
    }
   ],
   "source": [
    "print(n('up',0))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true,
    "run_control": {
     "frozen": false,
     "read_only": false
    }
   },
   "source": [
    "## Operations with operators\n",
    "\n",
    "Operators can be manipulated and anti-commutation relations will be used to simplify\n",
    "expressions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true,
    "execution": {
     "iopub.execute_input": "2022-06-22T22:11:35.156759Z",
     "iopub.status.busy": "2022-06-22T22:11:35.156501Z",
     "iopub.status.idle": "2022-06-22T22:11:35.159926Z",
     "shell.execute_reply": "2022-06-22T22:11:35.159193Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "run_control": {
     "frozen": false,
     "read_only": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n"
     ]
    }
   ],
   "source": [
    "# Should give 0\n",
    "print(n('up',0) - c_dag('up',0)*c('up',0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true,
    "execution": {
     "iopub.execute_input": "2022-06-22T22:11:35.162747Z",
     "iopub.status.busy": "2022-06-22T22:11:35.162495Z",
     "iopub.status.idle": "2022-06-22T22:11:35.166068Z",
     "shell.execute_reply": "2022-06-22T22:11:35.165493Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "run_control": {
     "frozen": false,
     "read_only": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-1*c_dag('up',0)*c('up',0)\n"
     ]
    }
   ],
   "source": [
    "# Some calculation\n",
    "print(n('up',0) - 2 * c_dag('up',0)*c('up',0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true,
    "execution": {
     "iopub.execute_input": "2022-06-22T22:11:35.169691Z",
     "iopub.status.busy": "2022-06-22T22:11:35.169431Z",
     "iopub.status.idle": "2022-06-22T22:11:35.173642Z",
     "shell.execute_reply": "2022-06-22T22:11:35.173087Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "run_control": {
     "frozen": false,
     "read_only": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-3*c_dag('down',0)*c('down',0) + -3*c_dag('up',0)*c('up',0) + 4*c_dag('down',0)*c_dag('up',0)*c('up',0)*c('down',0)\n"
     ]
    }
   ],
   "source": [
    "# Define the parameters\n",
    "U = 4\n",
    "mu = 3\n",
    "\n",
    "# H is an empty operator\n",
    "H = Operator()\n",
    "\n",
    "# Add elements to define a Hamiltonian\n",
    "H += U * n('up',0) * n('down',0)\n",
    "H -= mu * (n('up',0) + n('down',0))\n",
    "print(H)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exact Diagonalization\n",
    "\n",
    "For small system-sizes we can use `AtomDiag` provided by TRIQS to perform exact diagonalization on the Hamiltonian"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\u001b[0;31mSignature:\u001b[0m \u001b[0mAtomDiag\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
       "\u001b[0;31mDocstring:\u001b[0m\n",
       "Lightweight exact diagonalization solver\n",
       "\n",
       "Use the QR algorithm to diagonalize the Hamiltonian.\n",
       "Auto-partitions the Hamiltonian into subspaces (blocks)\n",
       "such that all creation and annihilation operators map one\n",
       "subspace to exactly one other subspace.\n",
       "\n",
       "Parameters\n",
       "----------\n",
       "h: Operator\n",
       "    Hamiltonian to be diagonalized.\n",
       "fops: list of tuple of strings and ints\n",
       "    List of all annihilation / creation operator flavors (indices).\n",
       "    Must at least contain all flavors met in `h`.\n",
       "qn_vector: list of Operator, optional\n",
       "    Vector of quantum number operators to be used for the auto-partitioning\n",
       "n_min, n_max: integers, optional\n",
       "    Truncate the Fock-space to states with particle number in [n_min, n_max]\n",
       "    Cannot be combined with qn_vector\n",
       "\u001b[0;31mFile:\u001b[0m      ~/opt/triqs/lib/python3.9/site-packages/triqs/atom_diag/__init__.py\n",
       "\u001b[0;31mType:\u001b[0m      function\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from triqs.atom_diag import AtomDiag\n",
    "?AtomDiag"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-22T22:11:35.315115Z",
     "iopub.status.busy": "2022-06-22T22:11:35.314883Z",
     "iopub.status.idle": "2022-06-22T22:11:35.318793Z",
     "shell.execute_reply": "2022-06-22T22:11:35.318197Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-3.0\n"
     ]
    }
   ],
   "source": [
    "# List of operator flavors\n",
    "fops = [('up',0), ('down',0)]\n",
    "\n",
    "# Construct AtomDiag object, Performs diagonalization\n",
    "AD = AtomDiag(h=H, fops=fops)\n",
    "\n",
    "print(AD.gs_energy)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can then use the `AtomDiag` object to obtain for example the atomic Green functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-22T22:11:35.321531Z",
     "iopub.status.busy": "2022-06-22T22:11:35.321258Z",
     "iopub.status.idle": "2022-06-22T22:11:36.126080Z",
     "shell.execute_reply": "2022-06-22T22:11:36.125564Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from triqs.atom_diag import atomic_g_tau\n",
    "Gtau = atomic_g_tau(atom=AD, beta=10, gf_struct=[('up',1),('down',1)], n_tau=1001)\n",
    "\n",
    "from triqs.plot.mpl_interface import oplot\n",
    "%matplotlib inline\n",
    "oplot(Gtau[\"up\"][0,0].real, name='G')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  },
  "widgets": {
   "state": {},
   "version": "1.1.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
