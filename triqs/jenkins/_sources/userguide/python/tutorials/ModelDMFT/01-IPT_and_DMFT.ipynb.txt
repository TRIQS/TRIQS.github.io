{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# A first DMFT calculation\n",
    "\n",
    "The goal of this notebook is to make a first DMFT calculation using the iterated perturbation theory (IPT) to solve the impurity problem.\n",
    "You will proceed in two steps: first you will set up the IPT\n",
    "impurity solver and then you will set up the DMFT loop.\n",
    "\n",
    "## The iterated perturbation theory\n",
    "\n",
    "The IPT is a cheap way to solve the impurity problem at half-filling, but fails away from half-filling [(further information)](https://doi.org/10.1103/PhysRevB.86.085133). It **approximates** the self-energy by second-order\n",
    "perturbation theory, just like in the last exercise of the notebook\n",
    "on Green's functions:\n",
    "\n",
    "$$ \\Sigma(i\\omega_n) = \\frac{U}{2} + U^2 \\int_0^\\beta d\\tau e^{i \\omega_n \\tau} {\\cal G}_0(\\tau)^3 $$\n",
    "\n",
    "Note that the first term, $\\frac{U}{2}$, is the chemical potential $\\mu$ for half-filling.\n",
    "\n",
    "### <i class=\"fa fa-gear fa-x\" style=\"color: #186391\"></i> Exercise 1\n",
    "\n",
    "An impurity solver takes a non-interacting Green's function $G_0$, an impurity interaction $U$ and an inverse temperature $\\beta$ as an input and returns the interacting Green's function $G$ as well as the\n",
    "self-energy $\\Sigma$.\n",
    "\n",
    "Write a function that takes $U$, $\\beta$ and ${\\cal G}_0(i\\omega)$ as an input and returns the second order perturbation theory result for $\\Sigma(i\\omega)$ as well as the corresponding $G(i\\omega)$. \n",
    "If you are more familiar with python, you can write a `Solver` class that is constructed with $\\beta$.\n",
    "The class should contain a class member `G0` that is to be initialized by the user.\n",
    "It should further contain a member function `solve` that, given the interaction $U$, sets the class members $G$ and $\\Sigma$ to the results. \n",
    "The advantage of using a class is that Green's functions will not have to be constructed at every call of the\n",
    "function `solve`.\n",
    "\n",
    "For half-filling $\\mu$ corresponds to $U/2$ for the one band model discussed here. It is however common practice to shift both the self-energy and $\\mu$ by $-U/2$ (keeping $G$ unchanged). This way $\\mu=0$ corresponds to the half-filled case, and the self-energy only consists of the second term in the IPT equation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# VERSION 1\n",
    "# Function solve\n",
    "def solve(U, G0, beta):\n",
    "    # code here\n",
    "    return G, Sigma\n",
    "\n",
    "# VERSION 2\n",
    "# Class version\n",
    "class IPTSolver:\n",
    "    def __init__(self, beta):\n",
    "        #define member self.G_iw, self.G0_iw, self.Sigma_iw\n",
    "        #the user of this class will then set the value of G0_iw (using <<) before calling solve\n",
    "        \n",
    "        #code here\n",
    "        pass\n",
    "    def solve(self,U):\n",
    "        #code here\n",
    "        pass"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Dynamical mean-field theory\n",
    "\n",
    "In DMFT, the lattice self-energy is approximated by that of an impurity\n",
    "model. One has to recursively solve a model in order to satisfy the\n",
    "self-consistency relation\n",
    "\n",
    "$$ G_\\mathrm{imp} = \\sum_k \\frac{1}{i \\omega_n + \\mu - \\epsilon_k - \\Sigma_\\mathrm{imp}} $$\n",
    "\n",
    "In practice one starts with a chosen ${\\cal G}_0$ and then solves the quantum\n",
    "impurity problem. This yields $\\Sigma_\\mathrm{imp}$. Using the self-consistency\n",
    "relation and Dyson's equation, we have a new proposal for ${\\cal G}_0$:\n",
    "\n",
    "$$ \\Big( {\\cal G}_0^\\mathrm{new} \\Big)^{-1} =\n",
    "\\Big( \\sum_k \\frac{1}{i \\omega_n + \\mu - \\epsilon_k - \\Sigma_\\mathrm{imp}} \\Big)^{-1}\n",
    "+ \\Sigma_\\mathrm{imp} $$\n",
    "\n",
    "We solve the quantum impurity for this new $G_0$ and loop until\n",
    "convergence\n",
    "\n",
    "<img src=\"imgs/selfcons.png\" width=40%>\n",
    "\n",
    "\n",
    "## Bethe lattice DMFT\n",
    "\n",
    "When the lattice is a Bethe lattice with infinite coordination, the self-consistency relation\n",
    "discussed above takes a particularly simple form\n",
    "\n",
    "$$ {\\cal G}_0^{-1} = i\\omega_n + \\mu - t^2 G_\\mathrm{imp} $$\n",
    "\n",
    "Hence, we do not need to perform a $k$-sum over the Brillouin zone to extract the new Weiss field ${\\cal G}_0$ for the Bethe lattice. Note that this is a specific attribute of the Bethe lattice, and for other lattice types one has to use the Dyson equation.\n",
    "\n",
    "### <i class=\"fa fa-gear fa-x\" style=\"color: #186391\"></i> Exercise 2\n",
    "\n",
    "You will now implement the DMFT loop for the Bethe lattice using the IPT solver that you have\n",
    "defined above. We give you the beginning of the script so that you have the parameters.\n",
    "In order to see how the DMFT loops converge, plot the spectral function of the Green's function\n",
    "at every loop. Use the Pade approximation to obtain the real-frequency Green's function.\n",
    "\n",
    "Note that, as we chose the convention $\\mu=0$ for the IPT solver, the chemical potential also drops out of the self-consistency relation of the Bethe lattice.\n",
    "\n",
    "Remember that the non-interacting Green's function ${\\cal G}_0(i\\omega)$ for the Bethe lattice can be obtained using `SemiCircular`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Parameters of the model\n",
    "t = 1.0\n",
    "U = 4.0\n",
    "beta = 20\n",
    "\n",
    "# Number of DMFT loops\n",
    "n_loops = 25\n",
    "\n",
    "# DMFT loop with self-consistency\n",
    "# code here"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualizing the Mott transition\n",
    "\n",
    "You now have all the material to do a scan for different values of $U$ and see how a Mott transition appears.\n",
    "\n",
    "### <i class=\"fa fa-gear fa-x\" style=\"color: #186391\"></i> Exercise 3\n",
    "\n",
    "Write a script which scans values of $U$ between 2.0 and 8.0 and plot the spectral function.\n",
    "Where does the Mott transition appear?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Parameters of the model\n",
    "t = 1.0\n",
    "beta = 20\n",
    "n_loops = 25\n",
    "\n",
    "# Loop over values of U\n",
    "for U in np.arange(2.0, 8.0, 1.0):\n",
    "    continue\n",
    "    # Solve DMFT\n",
    "    # code here\n",
    "\n",
    "    # Get the real-axis G with the the Pade analytical continuation\n",
    "    # Plot the spectral function"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  },
  "widgets": {
   "state": {},
   "version": "1.1.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
