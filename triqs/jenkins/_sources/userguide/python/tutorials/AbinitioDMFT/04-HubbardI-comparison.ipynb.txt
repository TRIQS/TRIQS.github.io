{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a5d86f1-d30e-42ce-a163-87c3320d1485",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "import os\n",
    "import sys\n",
    "from itertools import product\n",
    "import numpy as np\n",
    "np.set_printoptions(precision=4,suppress=True, linewidth=140)\n",
    "import scipy\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from h5 import HDFArchive\n",
    "from triqs.gf import *\n",
    "from triqs.gf.descriptors import Fourier, Omega\n",
    "from triqs.plot.mpl_interface import plt,oplot\n",
    "from triqs.lattice.utils import TB_from_wannier90, k_space_path\n",
    "\n",
    "import solid_dmft.postprocessing.plot_correlated_bands as pcb\n",
    "import solid_dmft.postprocessing.maxent_sigma as sigma_maxent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8d8313bd-be9f-4537-b08e-2f76b5361214",
   "metadata": {},
   "outputs": [],
   "source": [
    "fermi = 12.7367\n",
    "# w90 information\n",
    "w90_dict = {'w90_path': './data/mlwf/',\n",
    "            'w90_seed': 'lco',\n",
    "            'n_orb': 1,\n",
    "            'mu_tb': fermi}\n",
    "\n",
    "# plotting options\n",
    "plot_dict = {'colorscheme_bands': 'Greys',\n",
    "             'colorscheme_alatt': 'Spectral_r',\n",
    "             'colorscheme_kslice': 'Spectral_r'}\n",
    "\n",
    "tb_dict = {'bands_path': [('G', 'S\\''), ('S\\'', 'X'), ('X', 'G'), ('G', 'Z')], 'n_k': 50,\n",
    "            'G': [ 0.0,  0.0,  0.0], 'S\\'': [0.25, -0.25, 0.25], 'X': [0.0,  0.0,  0.5 ], 'Z': [0.25,  0.25, -0.25] }"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae071b9e-68bc-4a12-8a8d-cc4c96637dd5",
   "metadata": {},
   "source": [
    "# Comparison to Hubbard-I solution\n",
    "\n",
    "One feature of `solid_dmft` is the ability to seamlessly switch between different DMFT impurity solver. In this notebook we will compare the cthyb results with results of the [HubbardI solver](https://triqs.github.io/hubbardI). The `hubbardI` solver is much lighter than the cthyb solver, but numerically not exact. It neglects the coupling to the bath to calculate the self-energy, and solves the local Hamiltonian via exact diagonalization.\n",
    "\n",
    "To use the solver we prepared a second input file called `dmft_config_hubbardI.ini`. Take a look at the file: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "be2d78b9-10c9-4ef9-9465-8258522b0fe4",
   "metadata": {},
   "outputs": [],
   "source": [
    "!cat dmft_config_hubbardI.ini"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bdc2d8ed-fc68-449e-8e99-cc39f0e9fde6",
   "metadata": {},
   "source": [
    "The only necessary change is to switch the `solver_type` flag to `hubbardI`, and remove some unecessary flags in the `[solver]` section that are specific to Quantum Monte Carlo solvers. Run `solid_dmft` with this input file by passing the name of the config file as parameter: \n",
    "\n",
    "`>>> mpirun -n 4 solid_dmft dmft_config_hubbardI.ini`\n",
    "\n",
    "After the solver is finished (should be done in a minute or so) we load the results:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1b3d1487-e8e2-4dd3-9942-b9704c2752c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "with HDFArchive('b10-U3.6-hubbardI/lco_wannier.h5','r') as h5:\n",
    "    print(h5['DMFT_results']['last_iter'])\n",
    "    # the next two lines load all directly measured observables and the convergence metrics per iteration\n",
    "    obs = h5['DMFT_results/observables']\n",
    "    conv_obs = h5['DMFT_results/convergence_obs']\n",
    "    # The next lines load the last iteration impurity Green's function and self-energies\n",
    "    Sigma_real_freq_hI = h5['DMFT_results/last_iter/Sigma_Refreq_0']\n",
    "    G_atomic_w = h5['DMFT_results/last_iter/Gimp_Refreq_0']\n",
    "    G_imp_iw = h5['DMFT_results/last_iter/Gimp_freq_0']\n",
    "    G_imp_tau = h5['DMFT_results/last_iter/Gimp_time_0']\n",
    "    # last, the chemical potential and double counting potential\n",
    "    mu_hI = h5['DMFT_results']['last_iter']['chemical_potential_post']\n",
    "    dc_hI = h5['DMFT_results']['last_iter']['DC_pot']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1eb3527-de02-4742-b17d-7a915f55779f",
   "metadata": {},
   "source": [
    "We can now directly load the real frequency self-energy as `Sigma_real_freq_hI`, since the ED solvers can calculate the impurity Green's function directly on real frequency axis via the Lehman spectral representation, and solve the Dyson equation on the real axis. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e30cfe3-7fa7-4d6d-9fe9-c81763a2159d",
   "metadata": {},
   "source": [
    "<i class=\"fa fa-gear fa-2x\" style=\"color: #186391\"></i>&nbsp; compare the convergence with results from cthyb using the code fragments of the first notebook"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52b76fd7-25d0-4768-b2b8-92e9ca8055c0",
   "metadata": {},
   "source": [
    "<i class=\"fa fa-gear fa-2x\" style=\"color: #186391\"></i>&nbsp; compare the self-energy with the analytically continued self-energies for the metallic and the insulating cthyb results. Compare the shapes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "df05bc32-38ce-4efd-bdcf-c589ce23e4c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "with HDFArchive('b10-U3.6/lco_wannier.h5','r') as h5:\n",
    "    Sigma_real_freq_cthyb = h5['DMFT_results/last_iter']['Sigma_maxent_0']\n",
    "    mu = h5['DMFT_results']['last_iter']['chemical_potential_post']\n",
    "    dc = h5['DMFT_results']['last_iter']['DC_pot']\n",
    "    \n",
    "# replace XXX with your U value\n",
    "with HDFArchive('b10-XXXX/lco_wannier.h5','r') as h5:\n",
    "    Sigma_real_freq_cthyb_ins = h5['DMFT_results/last_iter']['Sigma_maxent_0']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "944b74e2-ebef-46f6-a877-2a9ea0a098b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, ax = plt.subplots(1,2, sharex=True, dpi=150, figsize=(10,4))\n",
    "\n",
    "# plot real part of the self-energy and subtract constant offset at 0.0 (Hartree shift)\n",
    "# Sigma_real_freq['up_0'](0.0) evaluates the self-energy at w=0.0\n",
    "ax[0].oplot((Sigma_real_freq_cthyb['up_0'] - Sigma_real_freq_cthyb['up_0'](0.0)[0,0]).real, '-', c='C0', label='cthyb met U=3.6')\n",
    "\n",
    "# plot imaginary part of the self-energy\n",
    "ax[1].oplot(-1*Sigma_real_freq_cthyb['up_0'].imag, '-', c='C0', label='cthyb met  U=3.6')\n",
    "\n",
    "ax[0].set_ylabel(r\"Re $\\Sigma (\\omega)$ (eV)\")\n",
    "ax[1].set_ylabel(r\"-Im $\\Sigma (\\omega)$ (eV)\")\n",
    "ax[0].set_ylim(-10,10)\n",
    "ax[1].set_ylim(0,10)\n",
    "ax[-1].set_xlim(-2.5,2.5)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76cc507d-7d89-4109-9e00-7c60663b6310",
   "metadata": {},
   "source": [
    "Now we can plot and compare the k-dependent spectral function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eae46929-9075-4d92-8e1c-bdfe33cd9825",
   "metadata": {},
   "outputs": [],
   "source": [
    "try:\n",
    "    dc_hI[0]['down_0'] = dc_hI[0].pop('down')\n",
    "    dc_hI[0]['up_0'] = dc_hI[0].pop('up')\n",
    "except: \n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e8ddbe62-552c-4d86-a24c-6c7465323dbd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# we have to specify the mesh of the spectral function and pass a new keywargs object sigma_dict\n",
    "w_mesh = {'window': [-4.0, 4.0], 'n_w': int(501)}\n",
    "sigma_dict = {'dmft_path': 'b10-U3.6-hubbardI/lco_wannier.h5', \n",
    "              'it': 'last_iter',\n",
    "              'spin': 'up_0', \n",
    "              'block' : 0 ,\n",
    "              'w_mesh': w_mesh, \n",
    "              'dc': dc_hI, \n",
    "              'mu_dmft': mu_hI}\n",
    "\n",
    "tb_bands, alatt_k_w_path, freq_dict = pcb.get_dmft_bands(with_sigma=Sigma_real_freq_hI, eta=0.1,\n",
    "                                                         **w90_dict, **tb_dict, **sigma_dict)\n",
    "\n",
    "fig, ax = plt.subplots(1,dpi=150,figsize=(7,4))\n",
    "pcb.plot_bands(fig, ax, alatt_k_w_path, tb_bands, freq_dict, n_orb=w90_dict['n_orb'], \n",
    "               tb=True, alatt=True, **plot_dict)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2dadf011-fdee-41f9-b3d7-4e5bbab673f6",
   "metadata": {},
   "source": [
    "<i class=\"fa fa-gear fa-2x\" style=\"color: #186391\"></i>&nbsp; calculate / plot once again the k-integrated spectral function for hubbardI and compare with your previous cthyb result. Plot also the atomic Green's function of the hubbardI solver `G_atomic_w`, which is already on the real frequency axis. Try to answer the following questions:\n",
    "1) Why do the spectra of the impurity Green's function and the k-integrated lattice Green's function differ?\n",
    "2) Which features of the spectral function are captured correctly for the same U value?\n",
    "3) For which kind of systems does the hubbardI approximation deliver reasonable results?\n",
    "\n",
    "Tip: When summing the lattice Green's functions for the HubbardI self-energy you have to introduce an extra broadening. Add something like `0.4j`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "23cf676e-58cf-44ec-b39a-0d7c413eb867",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, ax = plt.subplots(1,dpi=150,figsize=(6,3))\n",
    "\n",
    "ax.oplot(-1/np.pi*G_loc_w_cthyb.imag, label=r'A($\\omega$) cthyb')\n",
    "\n",
    "ax.oplot(-1/np.pi*G_atomic_w['up_0'].imag, label=r'A($\\omega$) atomic')\n",
    "\n",
    "ax.oplot(-1/np.pi*G_loc_w.imag, label=r'A($\\omega$) loc')\n",
    "\n",
    "ax.set_ylabel(r'A($\\omega$)')\n",
    "ax.set_xlabel(r'$\\omega$')\n",
    "ax.set_xlim(-5,5)\n",
    "ax.set_ylim(0,1.1)\n",
    "ax.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0da6b552-c197-4ed0-aeb9-6240778b4640",
   "metadata": {},
   "source": [
    "## Advanced: Running a Full charge self-consistent DFT+DMFT calculation\n",
    "\n",
    "Now that you have mastered the one-shot calculation, you can repeat the calculation with full charge self-consistency and see how the solution changes. Instructions are described in the tutorial:\n",
    "[triqs.github.io/solid_dmft/tutorials/Ce2O3_csc_w90/tutorial](https://triqs.github.io/solid_dmft/tutorials/Ce2O3_csc_w90/tutorial.html)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
