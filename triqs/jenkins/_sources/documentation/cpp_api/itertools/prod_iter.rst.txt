..
   Generated automatically by cpp2rst

.. highlight:: c
.. role:: red
.. role:: green
.. role:: param


.. _itertools__prod_iter:

itertools::prod_iter
====================

*#include <itertools.hpp>*

.. rst-class:: cppsynopsis

     template<typename EndIters, typename Iters> class  :red:`prod_iter`




Template parameters
-------------------

 * **EndIters**: Tuple type containing the end iterators of all ranges.

 * **Iters**: Iterator types.


Public members
--------------

.. table::
   :widths: 40 60


   +-----------+----------------------+-----------------------------------------------------------------+
   | its_begin | std::tuple<Iters...> |  Tuple containing the begin iterators of the original ranges.   |
   +-----------+----------------------+-----------------------------------------------------------------+
   | its_end   | EndIters             |  Tuple containing the end iterators of the original ranges.     |
   +-----------+----------------------+-----------------------------------------------------------------+
   | its       | std::tuple<Iters...> |  Tuple containing the current iterators of the original ranges. |
   +-----------+----------------------+-----------------------------------------------------------------+


Member functions
----------------

.. table::
   :widths: 40 60


   +----------------------------------------------------------+---------------------------------------------------------+
   | :ref:`(constructor) <itertools__prod_iter__constructor>` |                                                         |
   +----------------------------------------------------------+---------------------------------------------------------+
   | :ref:`increment <itertools__prod_iter__increment>`       |                                                         |
   +----------------------------------------------------------+---------------------------------------------------------+
   | :ref:`operator== <itertools__prod_iter__operator==>`     | Equal-to operator for two itertools::prod_iter objects. |
   +----------------------------------------------------------+---------------------------------------------------------+
   | :ref:`dereference <itertools__prod_iter__dereference>`   | Dereference the iterator.                               |
   +----------------------------------------------------------+---------------------------------------------------------+

.. toctree::
    :hidden:

    prod_iter/constructor
    prod_iter/increment
    prod_iter/operator==
    prod_iter/dereference