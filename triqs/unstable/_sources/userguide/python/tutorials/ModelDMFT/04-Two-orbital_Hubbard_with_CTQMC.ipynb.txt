{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Two-orbital Hubbard model\n",
    "=========================\n",
    "\n",
    "You will generalize the previous study to a two-orbital problem.\n",
    "We will still focus on a Bethe lattice so that the DMFT self-consistency is simple. For the interaction\n",
    "Hamiltonian, we will consider the Hubbard-Kanamori model for two bands. The Hamiltonian consists of density-density, spin-flip and pair-hopping terms:\n",
    "\n",
    "$$\n",
    "  H_{HK} =          U \\sum_{i} n_{i \\uparrow} n_{i \\downarrow}\n",
    "             + (U-2J) \\sum_{i \\neq i'} n_{i \\uparrow} n_{i' \\downarrow}\n",
    "             + (U-3J) \\sum_{i < i', \\sigma} n_{i \\sigma} n_{i' \\sigma} \n",
    "             - J \\sum_{i \\neq i'} a^\\dagger_{i \\uparrow} a_{i \\downarrow} a^\\dagger_{i' \\downarrow} a_{i' \\uparrow}\n",
    "             + J \\sum_{i \\neq i'} a^\\dagger_{i \\uparrow} a^\\dagger_{i \\downarrow} a_{i' \\downarrow} a_{i' \\uparrow},\n",
    "$$\n",
    "\n",
    "For this problem, the DMFT self-consistency still reads\n",
    "\n",
    "$$\n",
    "{\\cal G}_{0 i \\sigma}^{-1} (i\\omega_n) = i\\omega_n + \\mu - t^2 G_{i \\sigma} (i\\omega_n)\n",
    "$$\n",
    "\n",
    "Note that the Green's functions are diagonal in spin and orbital indices.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<i class=\"fa fa-gear fa-x\" style=\"color: #186391\"></i> Exercise 1\n",
    "----------\n",
    "\n",
    "Modify the script for the single-band Hubbard model to work here. We will be interested in the half- and quarter-filled cases, for which the respective chemical potentials are:\n",
    "\n",
    "$\\mu_{\\rm half} = 0.5 U + 0.5 (U-2J) + 0.5 (U-3J)$\n",
    "\n",
    "$\\mu_{\\rm quarter} = -0.81 + (0.6899 - 1.1099 \\, J/U) U + (-0.02548 + 0.02709 \\, J/U -0.1606 \\, (J/U)^2) U^2$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TO BE MODIFIED: Find below the previous script scripts/one_band.py\n",
    "\n",
    "from triqs.gf import *\n",
    "from triqs.operators import *\n",
    "from h5 import *\n",
    "from triqs_cthyb import Solver\n",
    "import numpy as np\n",
    "\n",
    "import os\n",
    "if not os.path.exists('data/one_band'):\n",
    "    os.makedirs('data/one_band')\n",
    "\n",
    "# Parameters of the model\n",
    "t = 1.0\n",
    "beta = 10.0\n",
    "n_loops = 10\n",
    "\n",
    "# Construct the impurity solver\n",
    "S = Solver(beta = beta, gf_struct = [('up',1), ('down',1)] )\n",
    "\n",
    "# I run for several values of U\n",
    "for U in np.arange(1.0, 13.0):\n",
    "    print('U =', U)\n",
    "\n",
    "    # This is a first guess for G\n",
    "    S.G_iw << SemiCircular(2*t)\n",
    "\n",
    "    # DMFT loop with self-consistency\n",
    "    for i in range(n_loops):\n",
    "    \n",
    "        print(\"\\n\\nIteration = %i / %i\" % (i+1, n_loops))\n",
    "    \n",
    "        # Symmetrize the Green's function and use self-consistency\n",
    "        g = 0.5 * ( S.G_iw['up'] + S.G_iw['down'] )\n",
    "        for name, g0 in S.G0_iw:\n",
    "            g0 << inverse( iOmega_n + U/2.0 - t**2 * g )\n",
    "\n",
    "        # Solve the impurity problem\n",
    "        S.solve(h_int = U * n('up',0) * n('down',0),   # Local Hamiltonian \n",
    "            n_cycles  = 10000,                           # Number of QMC cycles\n",
    "            n_warmup_cycles = 5000,                      # Warmup cycles\n",
    "            )\n",
    "    \n",
    "        # Save iteration in archive\n",
    "        with HDFArchive(\"data/one_band/half-U%.2f.h5\"%U) as A:\n",
    "            A['G-%i'%i] = S.G_iw\n",
    "            A['Sigma-%i'%i] = S.Sigma_iw"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you are stuck or short on time, take a sneak peek at the solution below. \n",
    "Note that there is a variable `filling` that can be set either to `half` or to \n",
    "`quarter` and that defines the filling of the problem. \n",
    "\n",
    "**Warning**: don't run the script, the calculations are quite long! It is just here for illustration purposes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%load scripts/two_band.py"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For the following exercises, the calculations have already been performed for you, and the data is stored in the `data/two_band` folder, see below. Use this data to perform the analysis below. Again, **do not run the script** on your machine! "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "!ls data/two_band/"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<i class=\"fa fa-gear fa-x\" style=\"color: #186391\"></i> Exercise 2\n",
    "----------\n",
    "\n",
    "Start by studying the problem at half-filling. By varying $U$ find the critical $U_c$ for the Mott transition for different values of $J$. How does $U_c$ change with $J$? Hint: take the following values for $J/U = 0.0, 0.1, 0.2$ and values of $U/t$ between 1 and 12."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "from triqs.gf import *\n",
    "from h5 import *\n",
    "from triqs.plot.mpl_interface import plt,oplot\n",
    "import matplotlib as mpl\n",
    "mpl.rcParams['figure.dpi']=100\n",
    "\n",
    "# code here"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<i class=\"fa fa-gear fa-x\" style=\"color: #186391\"></i> Exercise 3\n",
    "----------\n",
    "\n",
    "Do the same study as in Exercise 2, but at quarter-filling. How does $U_c$ change with $J$? Take again values of $J/U = 0.0, 0.1, 0.2$ and values of $U/t$ between 1 and 12."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  },
  "widgets": {
   "state": {},
   "version": "1.1.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
