{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1a5d86f1-d30e-42ce-a163-87c3320d1485",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-22T22:10:51.380960Z",
     "iopub.status.busy": "2022-06-22T22:10:51.380648Z",
     "iopub.status.idle": "2022-06-22T22:10:52.967604Z",
     "shell.execute_reply": "2022-06-22T22:10:52.966929Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Warning: could not identify MPI environment!\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Starting serial run at: 2022-06-22 18:10:52.469989\n"
     ]
    },
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'triqs_maxent'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Input \u001b[0;32mIn [1]\u001b[0m, in \u001b[0;36m<cell line: 19>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtriqs\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mlattice\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mutils\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m TB_from_wannier90, k_space_path\n\u001b[1;32m     18\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01msolid_dmft\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpostprocessing\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mplot_correlated_bands\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mpcb\u001b[39;00m\n\u001b[0;32m---> 19\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01msolid_dmft\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpostprocessing\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mmaxent_sigma\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01msigma_maxent\u001b[39;00m\n",
      "File \u001b[0;32m~/opt/triqs/lib/python3.9/site-packages/solid_dmft/postprocessing/maxent_sigma.py:41\u001b[0m, in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     38\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mnumpy\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mnp\u001b[39;00m\n\u001b[1;32m     40\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtriqs\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mutility\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m mpi\n\u001b[0;32m---> 41\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtriqs_maxent\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01msigma_continuator\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m InversionSigmaContinuator, DirectSigmaContinuator\n\u001b[1;32m     42\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtriqs_maxent\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01melementwise_maxent\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m PoormanMaxEnt\n\u001b[1;32m     43\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtriqs_maxent\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01momega_meshes\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m HyperbolicOmegaMesh\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'triqs_maxent'"
     ]
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "import os\n",
    "import sys\n",
    "from itertools import product\n",
    "import numpy as np\n",
    "np.set_printoptions(precision=4,suppress=True, linewidth=140)\n",
    "import scipy\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from h5 import HDFArchive\n",
    "from triqs.gf import *\n",
    "from triqs.gf.descriptors import Fourier, Omega\n",
    "from triqs.plot.mpl_interface import plt,oplot\n",
    "from triqs.lattice.utils import TB_from_wannier90, k_space_path\n",
    "\n",
    "import solid_dmft.postprocessing.plot_correlated_bands as pcb\n",
    "import solid_dmft.postprocessing.maxent_sigma as sigma_maxent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8d8313bd-be9f-4537-b08e-2f76b5361214",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-22T22:10:52.970480Z",
     "iopub.status.busy": "2022-06-22T22:10:52.970253Z",
     "iopub.status.idle": "2022-06-22T22:10:52.974390Z",
     "shell.execute_reply": "2022-06-22T22:10:52.973897Z"
    }
   },
   "outputs": [],
   "source": [
    "fermi = 12.7367\n",
    "# w90 information\n",
    "w90_dict = {'w90_path': './data/mlwf/',\n",
    "            'w90_seed': 'lco',\n",
    "            'add_spin': False, 'add_lambda': None,\n",
    "            'n_orb': 1,\n",
    "            'mu': fermi,\n",
    "            'orbital_order_w90': [0]}\n",
    "\n",
    "# plotting options\n",
    "plot_dict = {'colorscheme_bands': 'coolwarm', 'colorscheme_kslice': 'coolwarm', 'proj_on_orb': None, 'vmin': 0.0}\n",
    "\n",
    "tb_bands = {'bands_path': [('G', 'S\\''), ('S\\'', 'X'), ('X', 'G'), ('G', 'Z')], 'n_k': 50,\n",
    "            'G': [ 0.0,  0.0,  0.0], 'S\\'': [0.25, -0.25, 0.25], 'X': [0.0,  0.0,  0.5 ], 'Z': [0.25,  0.25, -0.25] }"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae071b9e-68bc-4a12-8a8d-cc4c96637dd5",
   "metadata": {},
   "source": [
    "# Comparison to Hubbard-I solution\n",
    "\n",
    "One feature of `solid_dmft` is the ability to seamlessly switch between different DMFT impurity solver. In this notebook we will compare the cthyb results with results of the [HubbardI solver](https://triqs.github.io/hubbardI). The `hubbardI` solver is much lighter that the cthyb solver, but numerically not exact. It neglects the coupling to the bath to calculate the self-energy, and solves the local Hamiltonian via exact diagonalization.\n",
    "\n",
    "To use the solver we prepared a second input file called `dmft_config_hubbardI.ini`. Take a look at the file: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "be2d78b9-10c9-4ef9-9465-8258522b0fe4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-22T22:10:52.977176Z",
     "iopub.status.busy": "2022-06-22T22:10:52.976847Z",
     "iopub.status.idle": "2022-06-22T22:10:53.101649Z",
     "shell.execute_reply": "2022-06-22T22:10:53.100711Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[general]\r\n",
      "seedname = lco_wannier\r\n",
      "jobname = b10-U3.6-hubbardI\r\n",
      "\r\n",
      "solver_type = hubbardI\r\n",
      "beta = 10\r\n",
      "eta = 0.001\r\n",
      "n_iw = 251\r\n",
      "n_tau = 5001\r\n",
      "n_iter_dmft = 5\r\n",
      "\r\n",
      "prec_mu = 0.0001\r\n",
      "dft_mu = 12.8\r\n",
      "\r\n",
      "h_int_type = kanamori\r\n",
      "U = 3.6\r\n",
      "J = 0.0\r\n",
      "\r\n",
      "dc_type = 0\r\n",
      "dc_dmft = False\r\n",
      "\r\n",
      "h5_save_freq = 1\r\n",
      "\r\n",
      "[solver]\r\n",
      "measure_density_matrix = True\r\n"
     ]
    }
   ],
   "source": [
    "!cat dmft_config_hubbardI.ini"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bdc2d8ed-fc68-449e-8e99-cc39f0e9fde6",
   "metadata": {},
   "source": [
    "The only necessary change is to switch the `solver_type` flag to `hubbardI`, and remove some unecessary flags in the `[solver]` section that are specific to Quantum Monte Carlo solvers. Run `solid_dmft` with this input file by passing the name of the config file as parameter: \n",
    "\n",
    "`>>> mpirun solid_dmft dmft_config_hubbardI.ini`\n",
    "\n",
    "After the solver is finished (should be done in a minute or so) we load the results:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1b3d1487-e8e2-4dd3-9942-b9704c2752c5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-22T22:10:53.105468Z",
     "iopub.status.busy": "2022-06-22T22:10:53.105146Z",
     "iopub.status.idle": "2022-06-22T22:10:53.230717Z",
     "shell.execute_reply": "2022-06-22T22:10:53.230115Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cannot open the HDF file b10-U3.6-hubbardI/lco_wannier.h5\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HDF5-DIAG: Error detected in HDF5 (1.12.2) thread 0:\n",
      "  #000: H5F.c line 620 in H5Fopen(): unable to open file\n",
      "    major: File accessibility\n",
      "    minor: Unable to open file\n",
      "  #001: H5VLcallback.c line 3502 in H5VL_file_open(): failed to iterate over available VOL connector plugins\n",
      "    major: Virtual Object Layer\n",
      "    minor: Iteration failed\n",
      "  #002: H5PLpath.c line 579 in H5PL__path_table_iterate(): can't iterate over plugins in plugin path '(null)'\n",
      "    major: Plugin for dynamically loaded library\n",
      "    minor: Iteration failed\n",
      "  #003: H5PLpath.c line 620 in H5PL__path_table_iterate_process_path(): can't open directory: /usr/local/hdf5/lib/plugin\n",
      "    major: Plugin for dynamically loaded library\n",
      "    minor: Can't open directory or file\n",
      "  #004: H5VLcallback.c line 3351 in H5VL__file_open(): open failed\n",
      "    major: Virtual Object Layer\n",
      "    minor: Can't open object\n",
      "  #005: H5VLnative_file.c line 97 in H5VL__native_file_open(): unable to open file\n",
      "    major: File accessibility\n",
      "    minor: Unable to open file\n",
      "  #006: H5Fint.c line 1835 in H5F_open(): unable to open file: name = 'b10-U3.6-hubbardI/lco_wannier.h5', tent_flags = 0\n",
      "    major: File accessibility\n",
      "    minor: Unable to open file\n",
      "  #007: H5FD.c line 723 in H5FD_open(): open failed\n",
      "    major: Virtual File Layer\n",
      "    minor: Unable to initialize object\n",
      "  #008: H5FDsec2.c line 355 in H5FD__sec2_open(): unable to open file: name = 'b10-U3.6-hubbardI/lco_wannier.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0\n",
      "    major: File accessibility\n",
      "    minor: Unable to open file\n"
     ]
    },
    {
     "ename": "RuntimeError",
     "evalue": ".. Error occurred at Wed Jun 22 18:10:53 2022\n\n.. Error .. in calling C++ overload of constructor :\n.. (no C++ name)(std::string name, char mode) -> \n.. C++ error was : \nHDF5 : cannot openfile : b10-U3.6-hubbardI/lco_wannier.h5",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)",
      "Input \u001b[0;32mIn [4]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[43mHDFArchive\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mb10-U3.6-hubbardI/lco_wannier.h5\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mr\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m \u001b[38;5;28;01mas\u001b[39;00m h5:\n\u001b[1;32m      2\u001b[0m     \u001b[38;5;28mprint\u001b[39m(h5[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mDMFT_results\u001b[39m\u001b[38;5;124m'\u001b[39m][\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mlast_iter\u001b[39m\u001b[38;5;124m'\u001b[39m])\n\u001b[1;32m      3\u001b[0m     \u001b[38;5;66;03m# the next two lines load all directly measured observables and the convergence metrics per iteration\u001b[39;00m\n",
      "File \u001b[0;32m~/opt/triqs/lib/python3.9/site-packages/h5/archive.py:383\u001b[0m, in \u001b[0;36mHDFArchive.__init__\u001b[0;34m(self, descriptor, open_flag, key_as_string_only, reconstruct_python_object, init)\u001b[0m\n\u001b[1;32m    380\u001b[0m         \u001b[38;5;28;01mtry\u001b[39;00m: os\u001b[38;5;241m.\u001b[39mremove(os\u001b[38;5;241m.\u001b[39mpath\u001b[38;5;241m.\u001b[39mabspath(LocalFileName))\n\u001b[1;32m    381\u001b[0m         \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mOSError\u001b[39;00m: \u001b[38;5;28;01mpass\u001b[39;00m\n\u001b[0;32m--> 383\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_init_root\u001b[49m\u001b[43m(\u001b[49m\u001b[43mLocalFileName\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mopen_flag\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    385\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39moptions \u001b[38;5;241m=\u001b[39m {\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mkey_as_string_only\u001b[39m\u001b[38;5;124m'\u001b[39m : key_as_string_only,\n\u001b[1;32m    386\u001b[0m                 \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mdo_not_overwrite_entries\u001b[39m\u001b[38;5;124m'\u001b[39m : \u001b[38;5;28;01mFalse\u001b[39;00m,\n\u001b[1;32m    387\u001b[0m                 \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mreconstruct_python_object\u001b[39m\u001b[38;5;124m'\u001b[39m: reconstruct_python_object,\n\u001b[1;32m    388\u001b[0m                 \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mUseAlpsNotationForComplex\u001b[39m\u001b[38;5;124m'\u001b[39m  : \u001b[38;5;28;01mTrue\u001b[39;00m\n\u001b[1;32m    389\u001b[0m                 }\n\u001b[1;32m    390\u001b[0m HDFArchiveGroup\u001b[38;5;241m.\u001b[39m\u001b[38;5;21m__init__\u001b[39m(\u001b[38;5;28mself\u001b[39m,\u001b[38;5;28mself\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[0;32m~/opt/triqs/lib/python3.9/site-packages/h5/archive_basic_layer.py:46\u001b[0m, in \u001b[0;36mHDFArchiveGroupBasicLayer._init_root\u001b[0;34m(self, descriptor, open_flag)\u001b[0m\n\u001b[1;32m     44\u001b[0m \u001b[38;5;28;01massert\u001b[39;00m(\u001b[38;5;28misinstance\u001b[39m(descriptor, \u001b[38;5;28mstr\u001b[39m))\n\u001b[1;32m     45\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m :\n\u001b[0;32m---> 46\u001b[0m     fich \u001b[38;5;241m=\u001b[39m \u001b[43mh5\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mFile\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdescriptor\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mopen_flag\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     47\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m :\n\u001b[1;32m     48\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCannot open the HDF file \u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m%\u001b[39mdescriptor)\n",
      "\u001b[0;31mRuntimeError\u001b[0m: .. Error occurred at Wed Jun 22 18:10:53 2022\n\n.. Error .. in calling C++ overload of constructor :\n.. (no C++ name)(std::string name, char mode) -> \n.. C++ error was : \nHDF5 : cannot openfile : b10-U3.6-hubbardI/lco_wannier.h5"
     ]
    }
   ],
   "source": [
    "with HDFArchive('b10-U3.6-hubbardI/lco_wannier.h5','r') as h5:\n",
    "    print(h5['DMFT_results']['last_iter'])\n",
    "    # the next two lines load all directly measured observables and the convergence metrics per iteration\n",
    "    obs = h5['DMFT_results/observables']\n",
    "    conv_obs = h5['DMFT_results/convergence_obs']\n",
    "    # The next lines load the last iteration impurity Green function and self-energies\n",
    "    Sigma_real_freq_hI = h5['DMFT_results/last_iter/Sigma_Refreq_0']\n",
    "    G_atomic_w = h5['DMFT_results/last_iter/Gimp_Refreq_0']\n",
    "    G_atomic_tau = h5['DMFT_results/last_iter/Gimp_time_0']\n",
    "    # last, the chemical potential and double counting potential\n",
    "    mu_hI = h5['DMFT_results']['last_iter']['chemical_potential_post']\n",
    "    dc_hI = h5['DMFT_results']['last_iter']['DC_pot']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1eb3527-de02-4742-b17d-7a915f55779f",
   "metadata": {},
   "source": [
    "We can now directly load the real frequency self-energy as `Sigma_real_freq_hI`, since the ED solvers can calculate the impurity Green function directly on real frequency axis via the Lehman spectral representation, and solve the Dyson equation on the real axis. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e30cfe3-7fa7-4d6d-9fe9-c81763a2159d",
   "metadata": {},
   "source": [
    "<i class=\"fa fa-gear fa-2x\" style=\"color: #186391\"></i>&nbsp; compare the convergence with results from cthyb using the code fragments of the first notebook"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52b76fd7-25d0-4768-b2b8-92e9ca8055c0",
   "metadata": {},
   "source": [
    "<i class=\"fa fa-gear fa-2x\" style=\"color: #186391\"></i>&nbsp; compare the self-energy with the analytically continued self-energies for the metallic and the insulating cthyb results. Compare the shapes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "df05bc32-38ce-4efd-bdcf-c589ce23e4c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-22T22:10:53.233839Z",
     "iopub.status.busy": "2022-06-22T22:10:53.233605Z",
     "iopub.status.idle": "2022-06-22T22:10:53.265392Z",
     "shell.execute_reply": "2022-06-22T22:10:53.264449Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cannot open the HDF file b10-U3.6/lco_wannier.h5\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HDF5-DIAG: Error detected in HDF5 (1.12.2) thread 0:\n",
      "  #000: H5F.c line 620 in H5Fopen(): unable to open file\n",
      "    major: File accessibility\n",
      "    minor: Unable to open file\n",
      "  #001: H5VLcallback.c line 3502 in H5VL_file_open(): failed to iterate over available VOL connector plugins\n",
      "    major: Virtual Object Layer\n",
      "    minor: Iteration failed\n",
      "  #002: H5PLpath.c line 579 in H5PL__path_table_iterate(): can't iterate over plugins in plugin path '(null)'\n",
      "    major: Plugin for dynamically loaded library\n",
      "    minor: Iteration failed\n",
      "  #003: H5PLpath.c line 620 in H5PL__path_table_iterate_process_path(): can't open directory: /usr/local/hdf5/lib/plugin\n",
      "    major: Plugin for dynamically loaded library\n",
      "    minor: Can't open directory or file\n",
      "  #004: H5VLcallback.c line 3351 in H5VL__file_open(): open failed\n",
      "    major: Virtual Object Layer\n",
      "    minor: Can't open object\n",
      "  #005: H5VLnative_file.c line 97 in H5VL__native_file_open(): unable to open file\n",
      "    major: File accessibility\n",
      "    minor: Unable to open file\n",
      "  #006: H5Fint.c line 1835 in H5F_open(): unable to open file: name = 'b10-U3.6/lco_wannier.h5', tent_flags = 0\n",
      "    major: File accessibility\n",
      "    minor: Unable to open file\n",
      "  #007: H5FD.c line 723 in H5FD_open(): open failed\n",
      "    major: Virtual File Layer\n",
      "    minor: Unable to initialize object\n",
      "  #008: H5FDsec2.c line 355 in H5FD__sec2_open(): unable to open file: name = 'b10-U3.6/lco_wannier.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0\n",
      "    major: File accessibility\n",
      "    minor: Unable to open file\n"
     ]
    },
    {
     "ename": "RuntimeError",
     "evalue": ".. Error occurred at Wed Jun 22 18:10:53 2022\n\n.. Error .. in calling C++ overload of constructor :\n.. (no C++ name)(std::string name, char mode) -> \n.. C++ error was : \nHDF5 : cannot openfile : b10-U3.6/lco_wannier.h5",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)",
      "Input \u001b[0;32mIn [5]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[43mHDFArchive\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mb10-U3.6/lco_wannier.h5\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mr\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m \u001b[38;5;28;01mas\u001b[39;00m h5:\n\u001b[1;32m      2\u001b[0m     Sigma_real_freq_cthyb \u001b[38;5;241m=\u001b[39m h5[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mDMFT_results/last_iter\u001b[39m\u001b[38;5;124m'\u001b[39m][\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mSigma_maxent_0\u001b[39m\u001b[38;5;124m'\u001b[39m]\n\u001b[1;32m      3\u001b[0m     mu \u001b[38;5;241m=\u001b[39m h5[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mDMFT_results\u001b[39m\u001b[38;5;124m'\u001b[39m][\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mlast_iter\u001b[39m\u001b[38;5;124m'\u001b[39m][\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mchemical_potential_post\u001b[39m\u001b[38;5;124m'\u001b[39m]\n",
      "File \u001b[0;32m~/opt/triqs/lib/python3.9/site-packages/h5/archive.py:383\u001b[0m, in \u001b[0;36mHDFArchive.__init__\u001b[0;34m(self, descriptor, open_flag, key_as_string_only, reconstruct_python_object, init)\u001b[0m\n\u001b[1;32m    380\u001b[0m         \u001b[38;5;28;01mtry\u001b[39;00m: os\u001b[38;5;241m.\u001b[39mremove(os\u001b[38;5;241m.\u001b[39mpath\u001b[38;5;241m.\u001b[39mabspath(LocalFileName))\n\u001b[1;32m    381\u001b[0m         \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mOSError\u001b[39;00m: \u001b[38;5;28;01mpass\u001b[39;00m\n\u001b[0;32m--> 383\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_init_root\u001b[49m\u001b[43m(\u001b[49m\u001b[43mLocalFileName\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mopen_flag\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    385\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39moptions \u001b[38;5;241m=\u001b[39m {\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mkey_as_string_only\u001b[39m\u001b[38;5;124m'\u001b[39m : key_as_string_only,\n\u001b[1;32m    386\u001b[0m                 \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mdo_not_overwrite_entries\u001b[39m\u001b[38;5;124m'\u001b[39m : \u001b[38;5;28;01mFalse\u001b[39;00m,\n\u001b[1;32m    387\u001b[0m                 \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mreconstruct_python_object\u001b[39m\u001b[38;5;124m'\u001b[39m: reconstruct_python_object,\n\u001b[1;32m    388\u001b[0m                 \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mUseAlpsNotationForComplex\u001b[39m\u001b[38;5;124m'\u001b[39m  : \u001b[38;5;28;01mTrue\u001b[39;00m\n\u001b[1;32m    389\u001b[0m                 }\n\u001b[1;32m    390\u001b[0m HDFArchiveGroup\u001b[38;5;241m.\u001b[39m\u001b[38;5;21m__init__\u001b[39m(\u001b[38;5;28mself\u001b[39m,\u001b[38;5;28mself\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[0;32m~/opt/triqs/lib/python3.9/site-packages/h5/archive_basic_layer.py:46\u001b[0m, in \u001b[0;36mHDFArchiveGroupBasicLayer._init_root\u001b[0;34m(self, descriptor, open_flag)\u001b[0m\n\u001b[1;32m     44\u001b[0m \u001b[38;5;28;01massert\u001b[39;00m(\u001b[38;5;28misinstance\u001b[39m(descriptor, \u001b[38;5;28mstr\u001b[39m))\n\u001b[1;32m     45\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m :\n\u001b[0;32m---> 46\u001b[0m     fich \u001b[38;5;241m=\u001b[39m \u001b[43mh5\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mFile\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdescriptor\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mopen_flag\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     47\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m :\n\u001b[1;32m     48\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCannot open the HDF file \u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m%\u001b[39mdescriptor)\n",
      "\u001b[0;31mRuntimeError\u001b[0m: .. Error occurred at Wed Jun 22 18:10:53 2022\n\n.. Error .. in calling C++ overload of constructor :\n.. (no C++ name)(std::string name, char mode) -> \n.. C++ error was : \nHDF5 : cannot openfile : b10-U3.6/lco_wannier.h5"
     ]
    }
   ],
   "source": [
    "with HDFArchive('b10-U3.6/lco_wannier.h5','r') as h5:\n",
    "    Sigma_real_freq_cthyb = h5['DMFT_results/last_iter']['Sigma_maxent_0']\n",
    "    mu = h5['DMFT_results']['last_iter']['chemical_potential_post']\n",
    "    dc = h5['DMFT_results']['last_iter']['DC_pot']\n",
    "    \n",
    "# replace XXX with your U value   \n",
    "with HDFArchive('b10-XXXX/lco_wannier.h5','r') as h5:\n",
    "    Sigma_real_freq_cthyb_ins = h5['DMFT_results/last_iter']['Sigma_maxent_0']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "944b74e2-ebef-46f6-a877-2a9ea0a098b4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-22T22:10:53.268727Z",
     "iopub.status.busy": "2022-06-22T22:10:53.268337Z",
     "iopub.status.idle": "2022-06-22T22:10:53.487367Z",
     "shell.execute_reply": "2022-06-22T22:10:53.486605Z"
    }
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'Sigma_real_freq_cthyb' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[0;32mIn [6]\u001b[0m, in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m fig, ax \u001b[38;5;241m=\u001b[39m plt\u001b[38;5;241m.\u001b[39msubplots(\u001b[38;5;241m1\u001b[39m,\u001b[38;5;241m2\u001b[39m, sharex\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m, dpi\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m150\u001b[39m, figsize\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m10\u001b[39m,\u001b[38;5;241m4\u001b[39m))\n\u001b[1;32m      3\u001b[0m \u001b[38;5;66;03m# plot real part of the self-energy and subtract constant offset at 0.0 (Hartree shift)\u001b[39;00m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m# Sigma_real_freq['up_0'](0.0) evaluates the self-energy at w=0.0\u001b[39;00m\n\u001b[0;32m----> 5\u001b[0m ax[\u001b[38;5;241m0\u001b[39m]\u001b[38;5;241m.\u001b[39moplot((\u001b[43mSigma_real_freq_cthyb\u001b[49m[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mup_0\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m-\u001b[39m Sigma_real_freq_cthyb[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mup_0\u001b[39m\u001b[38;5;124m'\u001b[39m](\u001b[38;5;241m0.0\u001b[39m)[\u001b[38;5;241m0\u001b[39m,\u001b[38;5;241m0\u001b[39m])\u001b[38;5;241m.\u001b[39mreal, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m-\u001b[39m\u001b[38;5;124m'\u001b[39m, c\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mC0\u001b[39m\u001b[38;5;124m'\u001b[39m, label\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcthyb met U=3.6\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m      7\u001b[0m \u001b[38;5;66;03m# plot imaginary part of the self-energy\u001b[39;00m\n\u001b[1;32m      8\u001b[0m ax[\u001b[38;5;241m1\u001b[39m]\u001b[38;5;241m.\u001b[39moplot(\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m\u001b[38;5;241m*\u001b[39mSigma_real_freq_cthyb[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mup_0\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39mimag, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m-\u001b[39m\u001b[38;5;124m'\u001b[39m, c\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mC0\u001b[39m\u001b[38;5;124m'\u001b[39m, label\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcthyb met  U=3.6\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
      "\u001b[0;31mNameError\u001b[0m: name 'Sigma_real_freq_cthyb' is not defined"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1500x600 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(1,2, sharex=True, dpi=150, figsize=(10,4))\n",
    "\n",
    "# plot real part of the self-energy and subtract constant offset at 0.0 (Hartree shift)\n",
    "# Sigma_real_freq['up_0'](0.0) evaluates the self-energy at w=0.0\n",
    "ax[0].oplot((Sigma_real_freq_cthyb['up_0'] - Sigma_real_freq_cthyb['up_0'](0.0)[0,0]).real, '-', c='C0', label='cthyb met U=3.6')\n",
    "\n",
    "# plot imaginary part of the self-energy\n",
    "ax[1].oplot(-1*Sigma_real_freq_cthyb['up_0'].imag, '-', c='C0', label='cthyb met  U=3.6')\n",
    "\n",
    "ax[0].set_ylabel(r\"Re $\\Sigma (\\omega)$ (eV)\")\n",
    "ax[1].set_ylabel(r\"-Im $\\Sigma (\\omega)$ (eV)\")\n",
    "ax[0].set_ylim(-10,10)\n",
    "ax[1].set_ylim(0,10)\n",
    "ax[-1].set_xlim(-2.5,2.5)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76cc507d-7d89-4109-9e00-7c60663b6310",
   "metadata": {},
   "source": [
    "Now we can plot and compare the k-dependent spectral function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "eae46929-9075-4d92-8e1c-bdfe33cd9825",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-22T22:10:53.490811Z",
     "iopub.status.busy": "2022-06-22T22:10:53.490560Z",
     "iopub.status.idle": "2022-06-22T22:10:53.494004Z",
     "shell.execute_reply": "2022-06-22T22:10:53.493240Z"
    }
   },
   "outputs": [],
   "source": [
    "try:\n",
    "    dc_hI[0]['down_0'] = dc_hI[0].pop('down')\n",
    "    dc_hI[0]['up_0'] = dc_hI[0].pop('up')\n",
    "except: \n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e8ddbe62-552c-4d86-a24c-6c7465323dbd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-22T22:10:53.497018Z",
     "iopub.status.busy": "2022-06-22T22:10:53.496787Z",
     "iopub.status.idle": "2022-06-22T22:10:53.520728Z",
     "shell.execute_reply": "2022-06-22T22:10:53.519241Z"
    }
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'dc_hI' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[0;32mIn [8]\u001b[0m, in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# we have to specify the mesh of the spectral function and pass a new keywargs object sigma_dict\u001b[39;00m\n\u001b[1;32m      2\u001b[0m w_mesh \u001b[38;5;241m=\u001b[39m {\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mwindow\u001b[39m\u001b[38;5;124m'\u001b[39m: [\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m4.0\u001b[39m, \u001b[38;5;241m4.0\u001b[39m], \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mn_w\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;28mint\u001b[39m(\u001b[38;5;241m501\u001b[39m)}\n\u001b[1;32m      3\u001b[0m sigma_dict \u001b[38;5;241m=\u001b[39m {\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mdmft_path\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mb10-U3.6-hubbardI/lco_wannier.h5\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mit\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mlast_iter\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124morbital_order_dmft\u001b[39m\u001b[38;5;124m'\u001b[39m: [\u001b[38;5;241m0\u001b[39m], \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mspin\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mup_0\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124meta\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;241m0.1\u001b[39m,\n\u001b[0;32m----> 4\u001b[0m               \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mblock\u001b[39m\u001b[38;5;124m'\u001b[39m : \u001b[38;5;241m0\u001b[39m ,\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mw_mesh\u001b[39m\u001b[38;5;124m'\u001b[39m: w_mesh, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mlinearize\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;28;01mFalse\u001b[39;00m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mdc\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[43mdc_hI\u001b[49m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mdmft_mu\u001b[39m\u001b[38;5;124m'\u001b[39m: mu_hI\u001b[38;5;241m-\u001b[39mobs[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmu\u001b[39m\u001b[38;5;124m'\u001b[39m][\u001b[38;5;241m0\u001b[39m]}\n\u001b[1;32m      6\u001b[0m tb_bands_data, alatt_k_w_path, freq_dict, dft_mu \u001b[38;5;241m=\u001b[39m pcb\u001b[38;5;241m.\u001b[39mget_dmft_bands(orbital_order_to \u001b[38;5;241m=\u001b[39m [\u001b[38;5;241m0\u001b[39m], with_sigma\u001b[38;5;241m=\u001b[39mSigma_real_freq_hI, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mw90_dict, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mtb_bands, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39msigma_dict)\n\u001b[1;32m      8\u001b[0m fig, ax \u001b[38;5;241m=\u001b[39m plt\u001b[38;5;241m.\u001b[39msubplots(\u001b[38;5;241m1\u001b[39m,dpi\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m150\u001b[39m,figsize\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m7\u001b[39m,\u001b[38;5;241m4\u001b[39m))\n",
      "\u001b[0;31mNameError\u001b[0m: name 'dc_hI' is not defined"
     ]
    }
   ],
   "source": [
    "# we have to specify the mesh of the spectral function and pass a new keywargs object sigma_dict\n",
    "w_mesh = {'window': [-4.0, 4.0], 'n_w': int(501)}\n",
    "sigma_dict = {'dmft_path': 'b10-U3.6-hubbardI/lco_wannier.h5', 'it': 'last_iter', 'orbital_order_dmft': [0], 'spin': 'up_0', 'eta': 0.1,\n",
    "              'block' : 0 ,'w_mesh': w_mesh, 'linearize': False, 'dc': dc_hI, 'dmft_mu': mu_hI-obs['mu'][0]}\n",
    "\n",
    "tb_bands_data, alatt_k_w_path, freq_dict, dft_mu = pcb.get_dmft_bands(orbital_order_to = [0], with_sigma=Sigma_real_freq_hI, **w90_dict, **tb_bands, **sigma_dict)\n",
    "\n",
    "fig, ax = plt.subplots(1,dpi=150,figsize=(7,4))\n",
    "pcb.plot_bands(fig, ax, alatt_k_w_path, tb_bands_data, freq_dict, n_orb=w90_dict['n_orb'], dft_mu=0.0, tb=True, alatt=True, **plot_dict)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2dadf011-fdee-41f9-b3d7-4e5bbab673f6",
   "metadata": {},
   "source": [
    "<i class=\"fa fa-gear fa-2x\" style=\"color: #186391\"></i>&nbsp; calculate / plot once again the k-integrated spectral function for hubbardI and compare with your previous cthyb result. Plot also the atomic Green's function of the hubbardI solver `G_atomic_w`, which is already on the real frequency axis. Try to answer the following questions:\n",
    "1) Why do the spectra of the atomic Green's function and the k-integrated lattice Green's function differ?\n",
    "2) Which features of the spectral function are captured correctly for the same U value?\n",
    "3) For which kind of systems does the hubbardI approximation deliver reasonable results?\n",
    "\n",
    "Tip: When summing the lattice Green's functions for the hubbardI self-energy you have to introduce an extra broadening. Add something like `0.4j`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "23cf676e-58cf-44ec-b39a-0d7c413eb867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-22T22:10:53.523987Z",
     "iopub.status.busy": "2022-06-22T22:10:53.523722Z",
     "iopub.status.idle": "2022-06-22T22:10:53.647103Z",
     "shell.execute_reply": "2022-06-22T22:10:53.646516Z"
    }
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'G_loc_w_cthyb' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[0;32mIn [9]\u001b[0m, in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m fig, ax \u001b[38;5;241m=\u001b[39m plt\u001b[38;5;241m.\u001b[39msubplots(\u001b[38;5;241m1\u001b[39m,dpi\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m150\u001b[39m,figsize\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m6\u001b[39m,\u001b[38;5;241m3\u001b[39m))\n\u001b[0;32m----> 3\u001b[0m ax\u001b[38;5;241m.\u001b[39moplot(\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m\u001b[38;5;241m/\u001b[39mnp\u001b[38;5;241m.\u001b[39mpi\u001b[38;5;241m*\u001b[39m\u001b[43mG_loc_w_cthyb\u001b[49m\u001b[38;5;241m.\u001b[39mimag, label\u001b[38;5;241m=\u001b[39m\u001b[38;5;124mr\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mA($\u001b[39m\u001b[38;5;124m\\\u001b[39m\u001b[38;5;124momega$) cthyb\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m      5\u001b[0m ax\u001b[38;5;241m.\u001b[39moplot(\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m\u001b[38;5;241m/\u001b[39mnp\u001b[38;5;241m.\u001b[39mpi\u001b[38;5;241m*\u001b[39mG_atomic_w[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mup_0\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39mimag, label\u001b[38;5;241m=\u001b[39m\u001b[38;5;124mr\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mA($\u001b[39m\u001b[38;5;124m\\\u001b[39m\u001b[38;5;124momega$) atomic\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m      7\u001b[0m ax\u001b[38;5;241m.\u001b[39moplot(\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m\u001b[38;5;241m/\u001b[39mnp\u001b[38;5;241m.\u001b[39mpi\u001b[38;5;241m*\u001b[39mG_loc_w\u001b[38;5;241m.\u001b[39mimag, label\u001b[38;5;241m=\u001b[39m\u001b[38;5;124mr\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mA($\u001b[39m\u001b[38;5;124m\\\u001b[39m\u001b[38;5;124momega$) loc\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
      "\u001b[0;31mNameError\u001b[0m: name 'G_loc_w_cthyb' is not defined"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 900x450 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(1,dpi=150,figsize=(6,3))\n",
    "\n",
    "ax.oplot(-1/np.pi*G_loc_w_cthyb.imag, label=r'A($\\omega$) cthyb')\n",
    "\n",
    "ax.oplot(-1/np.pi*G_atomic_w['up_0'].imag, label=r'A($\\omega$) atomic')\n",
    "\n",
    "ax.oplot(-1/np.pi*G_loc_w.imag, label=r'A($\\omega$) loc')\n",
    "\n",
    "ax.set_ylabel(r'A($\\omega$)')\n",
    "ax.set_xlabel(r'$\\omega$')\n",
    "ax.set_xlim(-5,5)\n",
    "ax.set_ylim(0,1.1)\n",
    "ax.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0da6b552-c197-4ed0-aeb9-6240778b4640",
   "metadata": {},
   "source": [
    "## Advanced: Running a Full charge self-consistent DFT+DMFT calculation\n",
    "\n",
    "Now that you have mastered the one-shot calculation, you can repeat the calculation with full charge self-consistency and see how the solution changes. Instructions are described in the tutorial:\n",
    "[flatironinstitute.github.io/solid_dmft/tutorials/Ce2O3_csc_w90/tutorial](https://flatironinstitute.github.io/solid_dmft/tutorials/Ce2O3_csc_w90/tutorial.html)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
