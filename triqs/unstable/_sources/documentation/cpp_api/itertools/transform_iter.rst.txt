..
   Generated automatically by cpp2rst

.. highlight:: c
.. role:: red
.. role:: green
.. role:: param


.. _itertools__transform_iter:

itertools::transform_iter
=========================

*#include <itertools.hpp>*

.. rst-class:: cppsynopsis

     template<typename Iter, typename F, typename Value = std::invoke_result_t<F,typenamestd::iterator_traits<Iter>::value_type> class  :red:`transform_iter`




Template parameters
-------------------

 * **Iter**: Iterator type.

 * **F**: Callable type.

 * **Value**: Return type of the callable.


Public members
--------------

.. table::
   :widths: 40 60


   +--------+------------------+-------------------------------------+
   | it     | Iter             |  Iterator of the original range.    |
   +--------+------------------+-------------------------------------+
   | lambda | std::optional<F> |  Callable doing the transformation. |
   +--------+------------------+-------------------------------------+


Member functions
----------------

.. table::
   :widths: 40 60


   +---------------------------------------------------------------+--------------------------------------------------------------+
   | :ref:`(constructor) <itertools__transform_iter__constructor>` |                                                              |
   +---------------------------------------------------------------+--------------------------------------------------------------+
   | :ref:`increment <itertools__transform_iter__increment>`       |                                                              |
   +---------------------------------------------------------------+--------------------------------------------------------------+
   | :ref:`operator= <itertools__transform_iter__operator=>`       |                                                              |
   +---------------------------------------------------------------+--------------------------------------------------------------+
   | :ref:`operator== <itertools__transform_iter__operator==>`     | Equal-to operator for two itertools::transform_iter objects. |
   +---------------------------------------------------------------+--------------------------------------------------------------+
   | :ref:`dereference <itertools__transform_iter__dereference>`   | Dereference the iterator.                                    |
   +---------------------------------------------------------------+--------------------------------------------------------------+

.. toctree::
    :hidden:

    transform_iter/constructor
    transform_iter/increment
    transform_iter/operator=
    transform_iter/operator==
    transform_iter/dereference