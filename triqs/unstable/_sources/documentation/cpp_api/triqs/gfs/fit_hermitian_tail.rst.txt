..
   Generated automatically by cpp2rst

.. highlight:: c
.. role:: red
.. role:: green
.. role:: param


.. _triqs__gfs__fit_hermitian_tail:

triqs::gfs::fit_hermitian_tail
==============================

*#include <triqs/gfs.hpp>*



**Synopsis**

 .. rst-class:: cppsynopsis

    1. | :green:`template<int N, typename G, typename A = typenameG::>`
       | std::pair<typename A::regular_type, double> :red:`fit_hermitian_tail` (G const & :param:`g`,
       |                     A const & :param:`known_moments` = {})

    2. | :green:`template<int N, typename BG, typename A = std::vector<typenameBG::g_t::data_t::regular_type>`
       | std::pair<std::vector<typename BG::g_t::data_t::regular_type>, double> :red:`fit_hermitian_tail` (BG const & :param:`bg`,
       |                     A const & :param:`known_moments` = {})

Documentation



 **1)**   Fit the tail of a Green function using a least-squares fitting procedure
        imposing the symmetry :math:`G[i\omega](i,j) = G[-i\omega](j,i)^*`



 **2)**   Fit the tail of a Block Green function using a least-squares fitting procedure
        imposing the symmetry :math:`G[i\omega](i,j) = G[-i\omega](j,i)^*` for each block





Template parameters
^^^^^^^^^^^^^^^^^^^

 * :param:`N` The position of the frequency mesh in case of a product mesh [default: 0]

 * :param:`G` The type of the Green function object

 * :param:`A` The type of the high-frequency moments

 * :param:`BG` The type of the Block Green function (block_gf, block_gf_view, block_gf_const_view)

 * :param:`AG` The type of the high-frequecy moments for Block Green functions (e.g. std::vector<array>)


Parameters
^^^^^^^^^^

 * :param:`g` The Green function object to fit the tail for

 * :param:`known_moments` The object containing the known high-frequency moments

 * :param:`bg` The Block Green function object to fit the tail for


Returns
^^^^^^^

A pair of the tail object and the fitting error

Example
^^^^^^^

..
   Included automatically from /src/triqs/doc/documentation/examples/triqs/gfs/fit_hermitian_tail.cpp

.. code-block:: cpp

    #include <triqs/gfs.hpp>
    #include <triqs/mesh.hpp>
    #include <iomanip>

    using namespace triqs::gfs;
    using namespace triqs;
    nda::clef::placeholder<0> iw_;

    int main() {
      double beta = 1.0;
      int n_iw    = 100;
      auto g      = gf<imfreq>{{beta, Fermion, n_iw}, {1, 1}};
      g[iw_] << 1.0 / iw_;
      auto [tail, err] = fit_hermitian_tail(g);
      std::cout << std::setprecision(2) << "Error: " << err << "\nTail:  " << tail;
    }


*Output*

.. code-block:: text

    Error: 5.1e-19
    Tail:  [(1.1e-16,0),(1,0),(1.1e-10,0),(-1.6e-09,0),(3.4e-05,0),(-0.00058,0),(3.6,0)]