..
   Generated automatically by cpp2rst

.. highlight:: c
.. role:: red
.. role:: green
.. role:: param


.. _triqs__gfs__make_hermitian:

triqs::gfs::make_hermitian
==========================

*#include <triqs/gfs.hpp>*



**Synopsis**

 .. rst-class:: cppsynopsis

       | :green:`template<typename G>`
       | typename G::regular_type :red:`make_hermitian` (G const & :param:`g`)





Symmetrize a Green function object to fullfill fundamental Green function properties.
Depending on the mesh and target rank one of the following transformations is performed
:math:`G[i\omega] \rightarrow \frac{1}{2} ( G[i\omega] + conj(G[-i\omega]) )`
:math:`G[\tau] \rightarrow \frac{1}{2} ( G[\tau] + conj(G[\tau]) )`
:math:`G[i\omega](i,j) \rightarrow \frac{1}{2} ( G[i\omega](i,j) + conj(G[-i\omega](j,i)) )`
:math:`G[\tau](i,j) \rightarrow \frac{1}{2} ( G[\tau](i,j) + conj(G[\tau](j,i)) )`
:math:`G[i\omega](i,j,k,l) \rightarrow \frac{1}{2} ( G[i\omega](i,j,k,l) + conj(G[-i\omega](k,l,i,j)) )`
:math:`G[\tau](i,j,k,l) \rightarrow \frac{1}{2} ( G[\tau](i,j,k,l) + conj(G[\tau](k,l,i,j)) )`





Template parameters
^^^^^^^^^^^^^^^^^^^

 * :param:`The` Green function type


Parameters
^^^^^^^^^^

 * :param:`g` The Green function object to symmetrize


Returns
^^^^^^^

The symmetrized Green function object