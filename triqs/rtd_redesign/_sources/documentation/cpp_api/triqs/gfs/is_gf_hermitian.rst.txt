..
   Generated automatically by cpp2rst

.. highlight:: c
.. role:: red
.. role:: green
.. role:: param


.. _triqs__gfs__is_gf_hermitian:

triqs::gfs::is_gf_hermitian
===========================

*#include <triqs/gfs.hpp>*



**Synopsis**

 .. rst-class:: cppsynopsis

       | :green:`template<typename G>`
       | bool :red:`is_gf_hermitian` (G const & :param:`g`, double :param:`tolerance` = 1.e-12)





Test if a Green function object fullfills the fundamental property mentioned below up to a fixed tolerance :math:`\epsilon`
Depending on the mesh and target rank one of the following properties is checked
:math:`G[i\omega] == \frac{1}{2} ( G[i\omega] + conj(G[-i\omega]) )`
:math:`G[\tau] == \frac{1}{2} ( G[\tau] + conj(G[\tau]) )`
:math:`G[i\omega](i,j) == \frac{1}{2} ( G[i\omega](i,j) + conj(G[-i\omega](j,i)) )`
:math:`G[\tau](i,j) == \frac{1}{2} ( G[\tau](i,j) + conj(G[\tau](j,i)) )`
:math:`G[i\omega](i,j,k,l) == \frac{1}{2} ( G[i\omega](i,j,k,l) + conj(G[-i\omega](k,l,i,j)) )`
:math:`G[\tau](i,j,k,l) == \frac{1}{2} ( G[\tau](i,j,k,l) + conj(G[\tau](k,l,i,j)) )`





Template parameters
^^^^^^^^^^^^^^^^^^^

 * :param:`The` Green function type


Parameters
^^^^^^^^^^

 * :param:`g` The Green function object to check the symmetry for

 * :param:`tolerance` The tolerance :math:`\epsilon` for the check [default=1e-12]


Returns
^^^^^^^

true iif the fundamental property holds for all points of the mesh