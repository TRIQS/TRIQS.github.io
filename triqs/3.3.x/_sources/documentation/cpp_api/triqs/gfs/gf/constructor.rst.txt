..
   Generated automatically by cpp2rst

.. highlight:: c
.. role:: red
.. role:: green
.. role:: param


.. _triqs__gfs__gf__constructor:

triqs::gfs::gf::constructor
===========================

*#include <triqs/gfs/gf.hpp>*



**Synopsis**

 .. rst-class:: cppsynopsis

    1. | :red:`gf` ()

    2. | :red:`gf` (gf<M, Target, Layout> const & :param:`x`)

    3. | :red:`gf` (gf<M, Target, Layout> && )

    4. | :red:`gf` (mesh_t :param:`m`, data_t :param:`dat`)

    5. | :red:`gf` (mesh_t :param:`m`, target_shape_t :param:`shape` = {})

    6. | :red:`gf` (gf_view<M, Target> const & :param:`g`)

    7. | :red:`gf` (gf_const_view<M, Target> const & :param:`g`)

    8. | :green:`template<typename G>`
       | :red:`gf` (G const & :param:`g`)

    9. | :green:`template<typename Tag>`
       | :red:`gf` (:ref:`lazy\<Tag, gf_const_view\<M, Target\>\> <mpi__lazy>` :param:`l`)

Documentation



 **1)**   Empty Green function (with empty array).



 **6)**   Makes a deep copy of the data



 **7)**   Makes a deep copy of the data



 **8)**   From any object modeling the :ref:`concept_GreenFunction`.



 **9)**   from the mpi lazy operation. Cf MPI section !





Template parameters
^^^^^^^^^^^^^^^^^^^

 * :param:`G` A type modeling :ref:`concept_GreenFunction`.

 * :param:`Tag`


Parameters
^^^^^^^^^^

 * :param:`m` Mesh

 * :param:`dat` data arrray

 * :param:`shape` Target shape

 * :param:`g`

 * :param:`l` The lazy object

  NB : type must be the same, e.g. g2(reduce(g1)) will work only if mesh, Target, Singularity are the same...


Example
^^^^^^^

..
   Included automatically from /src/triqs/doc/documentation/examples/triqs/gfs/gf_constructors_0.cpp

.. code-block:: cpp

    #include <triqs/gfs.hpp>
    #include <triqs/mesh.hpp>
    using namespace triqs::gfs;
    using namespace triqs;
    int main() {
      auto beta = 10.0;
      gf<imfreq> gf{{beta, Fermion}, {1, 1}};
    }