..
   Generated automatically by cpp2rst

.. highlight:: c
.. role:: red
.. role:: green
.. role:: param


.. _mpi__mpi_reduce:

mpi::mpi_reduce
===============

*#include <mpi.hpp>*



**Synopsis**

 .. rst-class:: cppsynopsis

    1. | :green:`template<typename T>`
       | T :red:`mpi_reduce` (T const & :param:`x`, :ref:`communicator <mpi__communicator>` :param:`c` = {}, int :param:`root` = 0, bool :param:`all` = false, MPI_Op :param:`op` = MPI_SUM)

    2. | :green:`template<typename T, std N>`
       | auto :red:`mpi_reduce` (std::array<T, N> const & :param:`arr`,
       |             :ref:`communicator <mpi__communicator>` :param:`c` = {},
       |             int :param:`root` = 0,
       |             bool :param:`all` = false,
       |             MPI_Op :param:`op` = MPI_SUM)

    3. | :green:`template<typename T1, typename T2>`
       | auto :red:`mpi_reduce` (std::pair<T1, T2> const & :param:`p`,
       |             :ref:`communicator <mpi__communicator>` :param:`c` = {},
       |             int :param:`root` = 0,
       |             bool :param:`all` = false,
       |             MPI_Op :param:`op` = MPI_SUM)

    4. | :green:`template<typename T>`
       | auto :red:`mpi_reduce` (std::vector<T> const & :param:`v`,
       |             :ref:`communicator <mpi__communicator>` :param:`c` = {},
       |             int :param:`root` = 0,
       |             bool :param:`all` = false,
       |             MPI_Op :param:`op` = MPI_SUM)

Documentation





Template parameters
^^^^^^^^^^^^^^^^^^^

 * :param:`T` Type to be reduced.

 * :param:`N` Size of the array.

 * :param:`T1` Type of the first element of the pair.

 * :param:`T2` Type of the second element of the pair.


Parameters
^^^^^^^^^^

 * :param:`x` Object to be reduced.

 * :param:`c` mpi::communicator.

 * :param:`root` Rank of the root process.

 * :param:`all` Should all processes receive the result of the reduction.

 * :param:`op` `MPI_Op` used in the reduction.

 * :param:`arr` `std::array` to reduce.

 * :param:`p` `std::pair` to be reduced.

 * :param:`v` `std::vector` to reduce.


Returns
^^^^^^^

`std::array` containing the result of the reduction.