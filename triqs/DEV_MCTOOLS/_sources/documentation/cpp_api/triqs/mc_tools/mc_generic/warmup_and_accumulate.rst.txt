..
   Generated automatically by cpp2rst

.. highlight:: c
.. role:: red
.. role:: green
.. role:: param


.. _triqs__mc_tools__mc_generic__warmup_and_accumulate:

triqs::mc_tools::mc_generic::warmup_and_accumulate
==================================================

*#include <triqs/mc_tools/mc_generic.hpp>*



**Synopsis**

 .. rst-class:: cppsynopsis

    1. | int :red:`warmup_and_accumulate` (std::int64_t :param:`ncycles_warmup`,
       |                        std::int64_t :param:`ncycles_acc`,
       |                        std::int64_t :param:`cycle_length`,
       |                        std::function<bool ()> :param:`stop_callback`,
       |                        MCSignType :param:`initial_sign`,
       |                        :ref:`communicator <mpi__communicator>` :param:`c` = mpi::communicator{})

    2. | int :red:`warmup_and_accumulate` (std::int64_t :param:`ncycles_warmup`,
       |                        std::int64_t :param:`ncycles_acc`,
       |                        std::int64_t :param:`cycle_length`,
       |                        std::function<bool ()> :param:`stop_callback`,
       |                        :ref:`communicator <mpi__communicator>` :param:`c` = mpi::communicator{})

Documentation



 **2)**   The same as warmup_and_accumulate(std::int64_t, std::int64_t, std::int64_t, std::function<bool()>, MCSignType,
        mpi::communicator) but without specifying the initial sign.





Parameters
^^^^^^^^^^

 * :param:`ncycles_warmup` Number of warumup cycles to run (\f:math:` < 1 \f` to run indefinitely).

 * :param:`ncycles_acc` Number of accumulation cycles to run (\f:math:` < 1 \f` to run indefinitely).

 * :param:`cycle_length` Number of MC steps per cycle (\f:math:` > 0 \f`).

 * :param:`stop_callback` Callback function to check if the simulation should be stopped (returns true to stop).

 * :param:`initial_sign` Sign of the initial MC configuration.

 * :param:`c` MPI communicator.


Returns
^^^^^^^

0 if the simulation has done all requested cycles, 1 if it has been stopped due to `stop_callback()`
 returned true, 2 if it has been stopped due to a signal.