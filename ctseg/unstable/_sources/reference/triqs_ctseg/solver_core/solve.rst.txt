..
   Generated automatically by cpp2rst

.. highlight:: c
.. role:: red
.. role:: green
.. role:: param
.. role:: cppbrief


.. _solver_core_solve:

triqs_ctseg::solver_core::solve
===============================


 **Synopsis**

 .. rst-class:: cppsynopsis

    1. | :cppbrief:`solve method: starts the Metropolis algorithm`
       | void :red:`solve` (triqs_ctseg::solve_parameters_t const & :param:`p`)


 solve method: starts the Metropolis algorithm

 Steps:

 - extract :math:`\Delta^\sigma_{ab}(\tau)` and :math:`\mu^\sigma_a` from :math:`\mathcal{G}^\sigma_{ab}(i\omega)`

 - if :math:`\mathcal{D}^{\sigma\sigma'}_{0,ab}(i\Omega)\neq 0`,  extract :math:`K(^{\sigma\sigma'}_{ab}\tau)` and :math:`\partial_\tau K^{\sigma\sigma'}_{ab}(\tau)` from :math:`\mathcal{D}^{\sigma\sigma'}_{0,ab}(i\Omega)`

 - if :math:`\mathcal{J}_{\perp,a}(i\Omega)\neq 0`,  extract :math:`\partial_\tau K_{\perp,a}(\tau)` from :math:`\mathcal{J}_{\perp,a}(i\Omega)`
 - add the moves and measures according to the parameters supplied by the user

 - start the Monte-Carlo simulation

 - finalize the Monte Carlo simulation