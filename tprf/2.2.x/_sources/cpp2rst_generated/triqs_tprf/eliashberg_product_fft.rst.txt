..
   Generated automatically by cpp2rst

.. highlight:: c
.. role:: red
.. role:: green
.. role:: param


.. _triqs_tprf__eliashberg_product_fft:

triqs_tprf::eliashberg_product_fft
==================================

*#include <triqs_tprf.hpp>*



**Synopsis**

 .. rst-class:: cppsynopsis

       | gk_iw_t :red:`eliashberg_product_fft` (chi_tr_vt :param:`Gamma_pp_dyn_tr`,
       |                         chi_r_vt :param:`Gamma_pp_const_r`,
       |                         gk_iw_vt :param:`g_wk`,
       |                         gk_iw_vt :param:`delta_wk`)





Linearized Eliashberg product via FFT

    Computes the product

    .. math::
        \Delta^{(out)}_{\bar{a}\bar{b}}(\mathbf{k},i\nu) =  -\frac{1}{N_k \beta}\sum_{\mathbf{k}'} \sum_{i\nu'}
 \Gamma_{A\bar{a}B\bar{b}}(\mathbf{k}-\mathbf{k}', i\nu - i\nu')
 \\ \times
 G_{A\bar{c}}(\mathbf{k}', i\nu')
 \Delta_{\bar{c}\bar{d}}(\mathbf{k}', i\nu')
 G_{B\bar{d}}(-\mathbf{k}', -i\nu')\,,

    by taking advantage of the convolution theorem.

    We therefore first calculate

    .. math::
       \Delta^{(out)}_{\bar{a}\bar{b}}(\mathbf{r}, \tau) =
 -\Gamma_{A\bar{a}B\bar{b}}(\mathbf{r}, \tau) F_{AB}(\mathbf{r}, \tau) \,,

    where

    .. math::
       F_{AB}(\mathbf{r}, \tau)  =
       \mathcal{F}\big(G_{A\bar{c}}(\mathbf{k}', i\nu')
 \Delta_{\bar{c}\bar{d}}(\mathbf{k}', i\nu')
 G_{B\bar{d}}(-\mathbf{k}', -i\nu')\big)\,.

    Then we Fourier transform

    .. math::
         \Delta^{(out)}_{\bar{a}\bar{b}}(\mathbf{k},i\nu) =
         \mathcal{F}\big(\Delta^{(out)}_{\bar{a}\bar{b}}(\mathbf{r}, \tau)\big)\,,

   to get the same result, but with far less computational effort.





Parameters
^^^^^^^^^^

 * :param:`chi_rt` dynamic part of the particle-particle vertex :math:`\Gamma^{(pp)}_{a\bar{b}c\bar{d}}(\mathbf{r}, \tau)`

 * :param:`chi_r` constant part of the particle-particle vertex :math:`\Gamma^{(pp)}_{a\bar{b}c\bar{d}}(\mathbf{r})`

 * :param:`g_kw` single particle Green's function :math:`G_{a\bar{b}}(\mathbf{k}, i\nu_n)`

 * :param:`delta_kw` pairing self-energy :math:`\Delta_{\bar{a}\bar{b}}(\mathbf{k}, i\nu_n)`


Returns
^^^^^^^

Gives the result of the product :math:`\Delta^{(out)} \sim \Gamma^{(pp)}GG \Delta`