..
   Generated automatically by cpp2rst

.. highlight:: c
.. role:: red
.. role:: green
.. role:: param


.. _triqs_tprf__eliashberg_product:

triqs_tprf::eliashberg_product
==============================

*#include <triqs_tprf.hpp>*



**Synopsis**

 .. rst-class:: cppsynopsis

       | gk_iw_t :red:`eliashberg_product` (chi_wk_vt :param:`Gamma_pp`,
       |                     gk_iw_vt :param:`g_wk`,
       |                     gk_iw_vt :param:`delta_wk`)





Linearized Eliashberg product

    Computes the product

    .. math::
        \Delta^{(out)}_{\bar{a}\bar{b}}(\mathbf{k},i\nu) =  -\frac{1}{N_k \beta}\sum_{\mathbf{k}'} \sum_{i\nu'}
 \Gamma_{A\bar{a}B\bar{b}}(\mathbf{k}-\mathbf{k}', i\nu - i\nu')
 \\ \times
 G_{A\bar{c}}(\mathbf{k}', i\nu')
 \Delta_{\bar{c}\bar{d}}(\mathbf{k}', i\nu')
 G_{B\bar{d}}(-\mathbf{k}', -i\nu')





Parameters
^^^^^^^^^^

 * :param:`chi_pp` particle-particle vertex :math:`\Gamma^{(pp)}_{a\bar{b}c\bar{d}}(\mathbf{k}, i\nu_n)`

 * :param:`g_kw` single particle Green's function :math:`G_{a\bar{b}}(\mathbf{k}, i\nu_n)`

 * :param:`delta_kw` pairing self-energy :math:`\Delta_{\bar{a}\bar{b}}(\mathbf{k}, i\nu_n)`


Returns
^^^^^^^

Gives the result of the product :math:`\Delta^{(out)} \sim \Gamma^{(pp)}GG \Delta`