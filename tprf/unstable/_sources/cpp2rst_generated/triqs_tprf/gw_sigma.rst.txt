..
   Generated automatically by cpp2rst

.. highlight:: c
.. role:: red
.. role:: green
.. role:: param


.. _triqs_tprf__gw_sigma:

triqs_tprf::gw_sigma
====================

*#include <triqs_tprf.hpp>*



**Synopsis**

 .. rst-class:: cppsynopsis

    1. | g_wk_t :red:`gw_sigma` (chi_wk_cvt :param:`W_wk`, g_wk_cvt :param:`g_wk`)

    2. | e_k_t :red:`gw_sigma` (chi_k_cvt :param:`v_k`, g_wk_cvt :param:`g_wk`)

    3. | g_tr_t :red:`gw_sigma` (chi_tr_cvt :param:`W_tr`, g_tr_cvt :param:`g_tr`)

Documentation



 **1)**   GW self energy :math:`\Sigma(i\omega_n, \mathbf{k})` calculator for dynamic interactions

           Splits the interaction into a dynamic and a static part

           .. math ::
               W_{abcd}(i\omega_n, \mathbf{k}) =
                   W^{(dyn)}_{abcd}(i\omega_n, \mathbf{k})
                   + V_{abcd}(\mathbf{k})

           by fitting the high-frequency tail.

           Fourier transforms the dynamic part of the interaction and the
           single-particle Green's function to imaginary time and real space.

           .. math::
               G_{ab}(\tau, \mathbf{r}) = \mathcal{F}^{-1}
                 \left\{ G_{ab}(i\omega_n, \mathbf{k}) \right\}

           .. math::
               W^{(dyn)}_{abcd}(\tau, \mathbf{r}) = \mathcal{F}^{-1}
                 \left\{ W^{(dyn)}_{abcd}(i\omega_n, \mathbf{k}) \right\}

           computes the GW self-energy as the product

           .. math::
               \Sigma^{(dyn)}_{ab}(\tau, \mathbf{r}) =
                 - \sum_{cd} W^{(dyn)}_{abcd}(\tau, \mathbf{r}) G_{cd}(\tau, \mathbf{r})

           and transforms back to frequency and momentum

           .. math::
               \Sigma^{(dyn)}_{ab}(i\omega_n, \mathbf{k}) =
                 \mathcal{F} \left\{ \Sigma^{(dyn)}_{ab}(\tau, \mathbf{r}) \right\}

           The self-energy of the static part of the interaction is calculated
           as the sum

           .. math::
               \Sigma^{(stat)}_{ab}(\mathbf{k}) = -\frac{1}{N_k}
                 \sum_{\mathbf{q}} V_{abab}(\mathbf{k}) \rho(G(i\omega_n, \mathbf{k+q}))_{ab}

           where :math:`\rho(G(i\omega_n, \mathbf{k+q}))` is the density matrix of the
           single particle Green's function.

           The total GW self-energy is given by

           .. math::
               \Sigma_{ab}(i\omega_n, \mathbf{k}) =
                 \Sigma^{(dyn)}_{ab}(i\omega_n, \mathbf{k})
                 + \Sigma^{(stat)}_{ab}(\mathbf{k})



 **2)**   GW self energy :math:`\Sigma(\mathbf{k})` calculator for static interactions

           Computes the GW self-energy of a static interaction as the sum

           .. math::
               \Sigma_{ab}(\mathbf{k}) = -\frac{1}{N_k}
                 \sum_{\mathbf{q}} V_{abab}(\mathbf{k}) \rho(G(i\omega_n, \mathbf{k+q}))_{ab}

           where :math:`\rho(G(i\omega_n, \mathbf{k+q}))` is the density matrix of the
           single particle Green's function.



 **3)**   GW self energy :math:`\Sigma(\tau, \mathbf{r})` calculator

           Computes the GW self-energy as the product

           .. math::
               \Sigma_{ab}(\tau, \mathbf{r}) =
                 - \sum_{cd} W_{abcd}(\tau, \mathbf{r}) G_{cd}(\tau, \mathbf{r})





Parameters
^^^^^^^^^^

 * :param:`W_wk` interaction :math:`W_{abcd}(i\omega_n, \mathbf{k})`

 * :param:`g_wk` single particle Green's function :math:`G_{ab}(i\omega_n, \mathbf{k})`

 * :param:`V_k` static interaction :math:`V_{abcd}(\mathbf{k})`

 * :param:`W_tr` interaction :math:`W_{abcd}(\tau, \mathbf{r})`

 * :param:`g_tr` single particle Green's function :math:`G_{ab}(\tau, \mathbf{r})`


Returns
^^^^^^^

GW self-energy :math:`\Sigma_{ab}(i\omega_n, \mathbf{k})`