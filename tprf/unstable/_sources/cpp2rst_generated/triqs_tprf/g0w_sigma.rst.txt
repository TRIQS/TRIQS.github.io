..
   Generated automatically by cpp2rst

.. highlight:: c
.. role:: red
.. role:: green
.. role:: param


.. _triqs_tprf__g0w_sigma:

triqs_tprf::g0w_sigma
=====================

*#include <triqs_tprf.hpp>*



**Synopsis**

 .. rst-class:: cppsynopsis

    1. | g_fk_t :red:`g0w_sigma` (double :param:`mu`,
       |            double :param:`beta`,
       |            e_k_cvt :param:`e_k`,
       |            chi_fk_cvt :param:`W_fk`,
       |            chi_k_cvt :param:`v_k`,
       |            double :param:`delta`)

    2. | e_k_t :red:`g0w_sigma` (double :param:`mu`, double :param:`beta`, e_k_cvt :param:`e_k`, chi_k_cvt :param:`v_k`)

Documentation



 **1)**   Real frequency GW self energy :math:`\Sigma(\omega, \mathbf{k})` calculator via the spectral representation

           Computes the spectral function of the dynamic part of the screened interaction

           .. math::
               W^{(spec)}_{ab}(\omega, \mathbf{k}) = \frac{-1}{\pi} \text{Im}
                 \left( W_{abab}(\omega, \mathbf{k}) - V_{abab}(\mathbf{k}) \right)

           and constructs the GW self energy via the spectral representation

           .. math::
               \Sigma_{ab}(\omega, \mathbf{k}) = \frac{-1}{N_k} \sum_{\mathbf{q}} \sum_{l}
                 U_{la}(\mathbf{k}+\mathbf{q}) U^{\dagger}_{bl}(\mathbf{k}+\mathbf{q})
                 V_{abab}(\mathbf{q}) f(\epsilon_{\mathbf{k}+\mathbf{q}, l}) \\
               + \frac{\delta_{\omega}}{N_k} \sum_{\mathbf{q}} \sum_{\omega'}
                 U_{la}(\mathbf{k}+\mathbf{q}) U^{\dagger}_{bl}(\mathbf{k}+\mathbf{q})
                 W^{(spec)}_{ab}(\omega', \mathbf{q})
                 \frac{n_B(\omega') + f(\epsilon_{\mathbf{k}+\mathbf{q}, l})}{\omega + i\delta + \omega' - \epsilon_{\mathbf{k}+\mathbf{q}, l} + \mu}

           where :math:`\delta_{\omega}` is the real-frequency mesh spacing and the :math:`U(\mathbf{k})` matrices are the diagonalizing unitary transform of the matrix valued
           dispersion relation :math:`\epsilon_{\bar{a}b}(\mathbf{k})`, i.e.

           .. math::
              \sum_{\bar{a}b} U_{i\bar{a}}(\mathbf{k}) \epsilon_{\bar{a}b}(\mathbf{k}) U^\dagger_{bj} (\mathbf{k})
              = \delta_{ij} \epsilon_{\mathbf{k}, i}



 **2)**   GW self energy :math:`\Sigma(\mathbf{k})` calculator for static interactions

           Computes the GW self-energy of a static interaction as the product

           .. math::
               \Sigma_{ab}(\mathbf{k}) = \frac{-1}{N_k} \sum_{\mathbf{q}} \sum_{l}
                 U_{la}(\mathbf{k}+\mathbf{q}) U^\dagger_{bl}(\mathbf{k}+\mathbf{q})
                 V_{abab}(\mathbf{q}) f(\epsilon_{\mathbf{k}+\mathbf{q}, l})

           where the :math:`U(\mathbf{k})` matrices are the diagonalizing unitary transform of the matrix valued
           dispersion relation :math:`\epsilon_{\bar{a}b}(\mathbf{k})`, i.e.

           .. math::
              \sum_{\bar{a}b} U_{i\bar{a}}(\mathbf{k}) \epsilon_{\bar{a}b}(\mathbf{k}) U^\dagger_{bj} (\mathbf{k})
              = \delta_{ij} \epsilon_{\mathbf{k}, i}





Parameters
^^^^^^^^^^

 * :param:`mu` chemical potential :math:`\mu`

 * :param:`beta` inverse temperature

 * :param:`e_k` discretized lattice dispersion :math:`\epsilon_{\bar{a}b}(\mathbf{k})`

 * :param:`W_fk` fully screened interaction :math:`W_{abcd}(\omega, \mathbf{k})`

 * :param:`V_k` bare interaction :math:`V_{abcd}(\mathbf{k})`

 * :param:`delta` broadening :math:`\delta`


Returns
^^^^^^^

static GW self-energy :math:`\Sigma_{ab}(\mathbf{k})`