..
   Generated automatically by cpp2rst

.. highlight:: c
.. role:: red
.. role:: green
.. role:: param


.. _triqs_cthyb__solver_core:

triqs_cthyb::solver_core
========================

*#include <triqs_cthyb.hpp>*

.. rst-class:: cppsynopsis

      class  :red:`solver_core`

Core class of the cthyb solver


Public members
--------------

.. table::
   :widths: 40 60


   +--------------------------+------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------+
   | G_tau                    | std::optional<G_tau_t>                   |  Single-particle Green's function :math:`G(\tau)` in imaginary time.                                                           |
   +--------------------------+------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------+
   | G_tau_accum              | std::optional<G_tau_G_target_t>          |  Intermediate Green's function to accumulate g(tau), either real or complex                                                    |
   +--------------------------+------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------+
   | asymmetry_G_tau          | std::optional<G_tau_G_target_t>          |  Violation of the fundamental Green function property G(tau)[i,j] = G(tau)*[j,i] after the measurement                         |
   +--------------------------+------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------+
   | G_l                      | std::optional<G_l_t>                     |  Single-particle Green's function :math:`G_l` in Legendre polynomial representation.                                           |
   +--------------------------+------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------+
   | O_tau                    | std::optional<gf<imtime, scalar_valued>> |  General operator Green's function :math:`O(\tau)` in imaginary time.                                                          |
   +--------------------------+------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------+
   | G2_tau                   | std::optional<G2_tau_t>                  |  Two-particle Green's function :math:`G^{(2)}(\tau_1,\tau_2,\tau_3)` (three Fermionic imaginary times)                         |
   +--------------------------+------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------+
   | G2_iw                    | std::optional<G2_iw_t>                   |  Two-particle Green's function :math:`G^{(2)}(i\nu,i\nu',i\nu'')` (three Fermionic frequencies)                                |
   +--------------------------+------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------+
   | G2_iw_nfft               | std::optional<G2_iw_t>                   |  Two-particle Green's function :math:`G^{(2)}(i\nu,i\nu',i\nu'')` (three Fermionic frequencies)                                |
   +--------------------------+------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------+
   | G2_iw_pp                 | std::optional<G2_iw_t>                   |  Two-particle Green's function :math:`G^{(2)}(i\omega,i\nu,i\nu')` in the pp-channel (one bosonic matsubara and two fermionic) |
   +--------------------------+------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------+
   | G2_iw_pp_nfft            | std::optional<G2_iw_t>                   |  Two-particle Green's function :math:`G^{(2)}(i\omega,i\nu,i\nu')` in the pp-channel (one bosonic matsubara and two fermionic) |
   +--------------------------+------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------+
   | G2_iw_ph                 | std::optional<G2_iw_t>                   |  Two-particle Green's function :math:`G^{(2)}(i\omega,i\nu,i\nu')` in the ph-channel (one bosonic matsubara and two fermionic) |
   +--------------------------+------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------+
   | G2_iw_ph_nfft            | std::optional<G2_iw_t>                   |  Two-particle Green's function :math:`G^{(2)}(i\omega,i\nu,i\nu')` in the ph-channel (one bosonic matsubara and two fermionic) |
   +--------------------------+------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------+
   | G2_iwll_pp               | std::optional<G2_iwll_t>                 |  Two-particle Green's function :math:`G^{(2)}(i\omega,l,l')` in the pp-channel (one bosonic matsubara and two legendre)        |
   +--------------------------+------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------+
   | G2_iwll_ph               | std::optional<G2_iwll_t>                 |  Two-particle Green's function :math:`G^{(2)}(i\omega,l,l')` in the ph-channel (one bosonic matsubara and two legendre)        |
   +--------------------------+------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------+
   | perturbation_order_total | std::optional<histogram>                 |  Histogram of the total perturbation order                                                                                     |
   +--------------------------+------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------+
   | perturbation_order       | std::optional<histo_map_t>               |  Histograms of the perturbation order for each block                                                                           |
   +--------------------------+------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------+
   | constr_parameters        | triqs_cthyb::constr_parameters_t         |                                                                                                                                |
   +--------------------------+------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------+
   | solve_parameters         | triqs_cthyb::solve_parameters_t          |                                                                                                                                |
   +--------------------------+------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------+


Member functions
----------------

.. table::
   :widths: 40 60


   +----------------------------------------------------------------------------------------------+--+
   | :ref:`(constructor) <triqs_cthyb__solver_core__constructor>`                                 |  |
   +----------------------------------------------------------------------------------------------+--+
   | :ref:`solve <triqs_cthyb__solver_core__solve>`                                               |  |
   +----------------------------------------------------------------------------------------------+--+
   | :ref:`h_loc <triqs_cthyb__solver_core__h_loc>`                                               |  |
   +----------------------------------------------------------------------------------------------+--+
   | :ref:`h_loc0 <triqs_cthyb__solver_core__h_loc0>`                                             |  |
   +----------------------------------------------------------------------------------------------+--+
   | :ref:`last_constr_parameters <triqs_cthyb__solver_core__last_constr_parameters>`             |  |
   +----------------------------------------------------------------------------------------------+--+
   | :ref:`last_solve_parameters <triqs_cthyb__solver_core__last_solve_parameters>`               |  |
   +----------------------------------------------------------------------------------------------+--+
   | :ref:`Delta_infty <triqs_cthyb__solver_core__Delta_infty>`                                   |  |
   +----------------------------------------------------------------------------------------------+--+
   | :ref:`Delta_tau <triqs_cthyb__solver_core__Delta_tau>`                                       |  |
   +----------------------------------------------------------------------------------------------+--+
   | :ref:`G0_iw <triqs_cthyb__solver_core__G0_iw>`                                               |  |
   +----------------------------------------------------------------------------------------------+--+
   | :ref:`density_matrix <triqs_cthyb__solver_core__density_matrix>`                             |  |
   +----------------------------------------------------------------------------------------------+--+
   | :ref:`h_loc_diagonalization <triqs_cthyb__solver_core__h_loc_diagonalization>`               |  |
   +----------------------------------------------------------------------------------------------+--+
   | :ref:`get_performance_analysis <triqs_cthyb__solver_core__get_performance_analysis>`         |  |
   +----------------------------------------------------------------------------------------------+--+
   | :ref:`average_sign <triqs_cthyb__solver_core__average_sign>`                                 |  |
   +----------------------------------------------------------------------------------------------+--+
   | :ref:`average_order <triqs_cthyb__solver_core__average_order>`                               |  |
   +----------------------------------------------------------------------------------------------+--+
   | :ref:`auto_corr_time <triqs_cthyb__solver_core__auto_corr_time>`                             |  |
   +----------------------------------------------------------------------------------------------+--+
   | :ref:`solve_status <triqs_cthyb__solver_core__solve_status>`                                 |  |
   +----------------------------------------------------------------------------------------------+--+
   | :ref:`hybridisation_is_complex <triqs_cthyb__solver_core__hybridisation_is_complex>`         |  |
   +----------------------------------------------------------------------------------------------+--+
   | :ref:`local_hamiltonian_is_complex <triqs_cthyb__solver_core__local_hamiltonian_is_complex>` |  |
   +----------------------------------------------------------------------------------------------+--+

.. toctree::
    :hidden:

    solver_core/constructor
    solver_core/solve
    solver_core/h_loc
    solver_core/h_loc0
    solver_core/last_constr_parameters
    solver_core/last_solve_parameters
    solver_core/Delta_infty
    solver_core/Delta_tau
    solver_core/G0_iw
    solver_core/density_matrix
    solver_core/h_loc_diagonalization
    solver_core/get_performance_analysis
    solver_core/average_sign
    solver_core/average_order
    solver_core/auto_corr_time
    solver_core/solve_status
    solver_core/hybridisation_is_complex
    solver_core/local_hamiltonian_is_complex